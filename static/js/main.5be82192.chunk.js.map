{"version":3,"sources":["html_components/ProgrammerLayout.module.css","html_components/Root.module.css","html_components/MemoryCellView.module.css","html_components/MemoryGrid.module.css","html_components/FlagCellView.module.css","utils/util.ts","logic/connections.ts","logic/component.ts","logic/ALU.tsx","logic/control.tsx","logic/Decoder.tsx","logic/Expand.tsx","utils/memory_cells.ts","logic/FlagLogic.tsx","logic/gates.tsx","logic/Incrementer.tsx","logic/Latch.tsx","logic/MainMemory.tsx","logic/Mux.tsx","logic/Probe.tsx","logic/Tristate.tsx","utils/djikstra.ts","logic/Wire.tsx","logic/datapath.tsx","html_components/DatapathLayout.tsx","html_components/MemoryCellView.tsx","html_components/MemoryGrid.tsx","html_components/FlagCellView.tsx","html_components/ProgrammerLayout.tsx","utils/csvio.ts","html_components/Root.tsx","serviceWorker.js","architectures/pico.ts","index.tsx"],"names":["module","exports","root","register_editor","semi_hidden","processor","left_controls","label","key","actions","info_message","error_message","switch_view_button","focused","use_read","use_write","use_instruction","use_jump_target","use_error","asUnsignedBits","value","nbits","fromSignedBits","bits","maxval","BusException","Input","name","x","y","Object","classCallCheck","this","defineProperty","_connection","writable","createClass","connection","classPrivateFieldLooseBase","set","used","undefined","markUsedBy","get","Error","parsed","parseInt","isNaN","ComponentUsageError","Output","_value","_connection2","_classPrivateFieldLoo","toFixed","LogicComponent","d","type","id","bus","maybeInput","concat","connectInput","maybeOutput","connectOutput","_Error","inherits","_super","createSuper","apply","arguments","wrapNativeSuper","ALU","_LogicComponent","params","_this","call","in0","in1","op","cin","out","flags","nBits","result","carryBit","signBit","ovf","asInteger","finishUp","negin1","asBoolean","clear","doADD","doAND","doINC","doINCB","doDEC","doDECB","doZERO","doRAL","doRAR","doCMA","doNEG","doONES","doSUB","doOR","doXOR","k","react_default","a","createElement","ALU_ALUView","c","ALUView","_this$props$c","props","xfrm","transform","className","React","Component","Bus","_inputs","_usedBy","connectedInputPins","connectedOutputPins","includes","push","input","setConnection","p","output","length","_step","activeInputs","Inactive","_iterator","createForOfIteratorHelper","s","n","done","Conflict","err","e","f","_step2","_iterator2","_step3","_iterator3","Control","assertThisInitialized","_options","width","height","control_value","top","options","wid","splice","option","i","control_ControlView","ControlView","_this2","lx","ly","labelStyle","rectClass","active","onClick","decoderEnabled","toggle","eval","assign","makeProceduralPiece","valueSource","datapath","decrement","split","pdec","v","console","log","choices","parseMessageExpression","pieces","buffer","parsingExpr","compId","success","components","copied","piece","StepResult","makeMessage","nextCycleOverride","parseControlList","cycleNames","isLast","previousMessageOverride","trim","cycleOverride","_step4","_iterator4","parts","cname","_step6","_iterator6","controls","control","getValueOfOption","indexOf","_step5","_iterator5","_step5$value","setValue","DecoderMicrocode","clockCycleNames","fetchCycleAction","instructions","Decoder","in","_enabled","_datapath","_microcode","_currentCycle","_lastInstrDesc","decoder","cnames","fetchCycleStep","_step7","_iterator7","completeMessage","opcode","steps","slice","parsedSteps","pmo","last","messageGenerator","parseDecoderMicrocode","currentInstruction","reverse","pop","_step8","_iterator8","instr","haltRequested","getCurrentInstruction","_step9","_iterator9","reset","after","doCurrentStepAction","ci","decoderCycleFinished","Decoder_DecoderView","DecoderView","enabled","statusDesc","_step10","_iterator10","textAnchor","Expand","inNBits","outNBits","extend","strValue","outValue","Expand_ExpandView","ExpandView","x1","y1","x2","y2","DataCell","_label","memory_cells_value","lastUse","MemoryCell","_DataCell","FlagCell","_DataCell2","_super2","maybeNot","val","maybeBit","bit","bitName","FlagLogic","flagN","flagZ","flagC","flagV","flagTZ","visibleFlags","inval","FlagLogic_FlagLogicView","FlagLogicView","inStr","outStr","And","_params","b","gates_AndView","AndView","Or","_LogicComponent2","_super3","gates_OrView","OrView","_this$props$c2","AndOr","_LogicComponent3","_super5","_this3","in2","gates_AndOrView","AndOrView","_this$props$c3","Incrementer","constant","Incrementer_IncrementerView","IncrementerView","asUserText","cx","cy","r","Latch","load","resetValue","data","signed","visible","visibleRegisters","clearLastUse","Latch_LatchView","LatchView","fval","lastUseCssClass","MainMemory","addr","memr","memw","din","dout","highlight_instr","highlight_jumpt","highlight_addr","addrbits","databits","_cells","mainMemoryBlock","addrY","memrY","memwY","dataY","usage","MainMemory_MainMemoryView","MainMemoryView","Mux","sel","Mux_MuxView","MuxView","Probe","Probe_ProbeView","ProbeView","Tristate","enable","flip","Tristate_TristateView","TristateView","x0","Node","connections","distance","Pathfinder","numNodes","nodes","node0","node1","nodeIndex","thisDistance","next","node","_i","_next","propogateDistance","targetNode","startFrom","route","currentNode","connectedNode","Wire","pathDescription","ins","outs","segments","segmentPathfind","builder","SegmentsBuilder","parse","source","sl","target","tl","addBidirectionalConnection","px","py","ip","index","findIndex","segment","Wire_WireView","WireSegment","join","path","_this$getInputPin","getInputPin","_this$getOutputPin","getOutputPin","wireDescription","addSegment","description","idx","arr","mode","stk","outputToInput","t","isX","valy","WireView","busValue","displayValue","segmentsAreUsed","Array","fill","activeInput","inputSegment","segmentIndexConnectedAt","setTarget","usedBy","startingPoint","findRoute","seg","componentTypes","Map","Datapath","_components","_wires","_buses","changeListener","lastMessage","lastMessageWasError","def","cdef","component","_this$decoder","findComp","find","wires","wdef","inputs","_idef$split","_idef$split2","slicedToArray","cid","pin","comp","outputs","_odef$split","_odef$split2","wire","microcode","loadMicrocode","clearHighlights","error","exception","doWork","iters","message","clearUsedBy","evalClock","_this$decoder2","DatapathView","_React$Component","children","render","_step11","_iterator11","w","_this$props$datapath","viewBox","DatapathLayout","datapath_DatapathView","style","datapathView","MemoryCellView","cssc","cell","text","_e","MemoryGrid","makeRegisterCell","MemoryCellView_MemoryCellView","memoryBlock","focusedIndex","columnSize","Math","ceil","row","FlagCellView","flag","ProgrammerLayout","textBoxRef","createRef","state","editing","memoryIndex","focusCell","setState","selectTextBox","_this$textBoxRef$curr","_this$textBoxRef$curr2","current","focus","select","at","mem","targetIndex","forceUpdate","editingLabel","isEditingMemory","sidebarItems","_loop","reg","FlagCellView_FlagCellView","ref","onChange","event","toUpperCase","onKeyUp","shiftMemoryUp","disabled","shiftMemoryDown","MemoryGrid_MemoryGrid","trimQuotes","startsWith","endsWith","substr","csvio","saveMem","lastItemWasInitialized","item","loadMem","file","numberText","currentIndex","char","trimmed","trimmedData","Root","_running","_fast","_timer","datapathLayout","flashStepBtn","_event$target$files","files","then","alert","contents","blob","Blob","href","URL","createObjectURL","link","document","download","click","remove","fast","timerTick","clearTimeout","objectSpread2","_this4","doStep","speed","window","setTimeout","clock","stopClock","dp","safetyCounter","_dp$decoder","getInstructionDescription","_this5","mainWidget","DatapathLayout_DatapathLayout","ProgrammerLayout_ProgrammerLayout","startClock","saveFile","htmlFor","loadFile","accept","toggleLayout","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","PICO","x3","y3","y0","loadDef","ReactDOM","Root_Root","getElementById","process","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5be82192.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ProgrammerLayout_root__32s_m\",\"register_editor\":\"ProgrammerLayout_register_editor__3nPB9\",\"semi_hidden\":\"ProgrammerLayout_semi_hidden__1Qtk5\",\"processor\":\"ProgrammerLayout_processor__h4yOd\",\"left_controls\":\"ProgrammerLayout_left_controls__26RPC\",\"label\":\"ProgrammerLayout_label__toU0p\",\"key\":\"ProgrammerLayout_key___C1uD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Root_root__39OtQ\",\"actions\":\"Root_actions__UtMJ6\",\"semi_hidden\":\"Root_semi_hidden__2Z0tJ\",\"info_message\":\"Root_info_message__1Lxng\",\"error_message\":\"Root_error_message__2m22s\",\"switch_view_button\":\"Root_switch_view_button__3DJ62\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MemoryCellView_root__2Bi1u\",\"focused\":\"MemoryCellView_focused__2xtz6\",\"use_read\":\"MemoryCellView_use_read__GaQ6a\",\"use_write\":\"MemoryCellView_use_write__2x-Wx\",\"use_instruction\":\"MemoryCellView_use_instruction__3m6zH\",\"use_jump_target\":\"MemoryCellView_use_jump_target__2Ig6J\",\"use_error\":\"MemoryCellView_use_error__2MS70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MemoryGrid_root__2kL-I\",\"label\":\"MemoryGrid_label__IVI4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FlagCellView_root__fBMTz\"};","// Clips the provided number to be the indicated number of bits.\nexport function asUnsignedBits(value: number, nbits: number): number\n{\n  return value & ((1 << nbits) - 1);\n}\n\n// Clips the provided number to be the indicated number of bits.\nexport function fromSignedBits(value: number, nbits: number): number\n{\n  let bits = asUnsignedBits(value, nbits);\n  const maxval = 1 << (nbits - 1);\n  if (bits >= maxval)\n  {\n    bits -= maxval * 2;\n  }\n  return bits;\n}","import { Input, LogicComponent, Output } from \"./component\";\n\nexport enum BusException\n{\n  Inactive,\n  Conflict,\n}\n\nexport class Bus\n{\n  // The inputs to the bus are the outputs of components.\n  #inputs: Array<Output> = [];\n  // The connections which are using the value this bus contains.\n  #usedBy: Array<Input> = [];\n\n  // Stores the pins that are connected to this bus, used for building a wire\n  // which visually represents this bus. Unfortunately we cannot use [tuple, notation]\n  // because that causes ts to freak out.\n  public connectedInputPins: Array<{ c: LogicComponent, p: Input }> = [];\n  public connectedOutputPins: Array<{ c: LogicComponent, p: Output }> = [];\n\n  get used(): boolean\n  {\n    return this.#usedBy.length > 0;\n  }\n\n  get usedBy(): Array<Input>\n  {\n    return this.#usedBy;\n  }\n\n  markUsedBy(connection: Input)\n  {\n    if (!this.#usedBy.includes(connection))\n    {\n      this.#usedBy.push(connection);\n    }\n  }\n\n  clearUsedBy()\n  {\n    this.#usedBy = [];\n  }\n\n  // Returns the current value of this bus as a string if valid, or a variant of\n  // BusException otherwise.\n  get displayValue(): string | BusException.Inactive | BusException.Conflict\n  {\n    let activeInputs = 0;\n    let value: string | BusException.Inactive = BusException.Inactive;\n    for (let input of this.#inputs)\n    {\n      if (input.value !== undefined) \n      {\n        if (activeInputs === 0)\n        {\n          value = input.value;\n          activeInputs = 1;\n        }\n        else\n        {\n          // This would now be the second active input we've found.\n          return BusException.Conflict;\n        }\n      }\n    }\n    return value;\n  }\n\n  // Like getDisplayValue but uses undefined if there is a problem. This is used\n  // because it is easier to implement eval() functions this way.\n  get value(): string | undefined \n  {\n    let activeInputs = 0;\n    let value: string | undefined = undefined;\n    for (let input of this.#inputs)\n    {\n      if (input.value !== undefined) \n      {\n        if (activeInputs === 0)\n        {\n          value = input.value;\n        }\n        else\n        {\n          // This would now be the second active input we've found.\n          return undefined;\n        }\n      }\n    }\n    return value;\n  }\n\n  // Returns the input which is currently driving the bus, or undefined if no\n  // inputs or more than one input is currently driving the bus.\n  get activeInput(): Output | undefined\n  {\n    let activeInputs = 0;\n    let value: Output | undefined = undefined;\n    for (let input of this.#inputs)\n    {\n      if (input.value !== undefined) \n      {\n        if (activeInputs === 0)\n        {\n          value = input;\n        }\n        else\n        {\n          // This would now be the second active input we've found.\n          return undefined;\n        }\n      }\n    }\n    return value;\n  }\n\n  // Connects a component's input such that its value is provided by this bus.\n  public connectInput(c: LogicComponent, input: Input)\n  {\n    input.setConnection(this);\n    this.connectedInputPins.push({ c, p: input });\n  }\n\n  // Connects a component's output such that its value is fed into this bus.\n  public connectOutput(c: LogicComponent, output: Output)\n  {\n    output.connection = this;\n    this.#inputs.push(output);\n    this.connectedOutputPins.push({ c, p: output });\n  }\n}\n","import { Bus } from \"./connections\";\nimport { Datapath } from \"./datapath\";\n\nexport class Input\n{\n  // This should return the value of what the input is connected to when called.\n  #connection: Bus | undefined;\n\n  constructor(\n    public name: string,\n    public x: number,\n    public y: number,\n  ) { }\n\n  // Mark that the value from this input has been used for something.\n  public set used(used: boolean)\n  {\n    if (used && this.#connection !== undefined)\n    {\n      this.#connection.markUsedBy(this);\n    }\n  }\n\n  // Set the connection of this input \n  setConnection(connection: Bus)\n  {\n    this.#connection = connection;\n  }\n\n  // Returns the value being fed into this input. Returns undefined i this input is not being fed\n  // a value.\n  get value(): string | undefined\n  {\n    if (this.#connection === undefined)\n    {\n      return undefined;\n    }\n    else\n    {\n      return this.#connection.value;\n    }\n  }\n\n  // Returns the value being fed into this input as a boolean. Throws an error if this input is \n  // being fed a value that is not a boolean. Returns undefined if this input is not being fed a\n  // value.\n  get asBoolean(): boolean | undefined\n  {\n    let value = this.value;\n    if (typeof value === 'string')\n    {\n      if (value === '0' || value === 'false')\n      {\n        return false;\n      }\n      else if (value === '1' || value === 'true')\n      {\n        return true;\n      }\n      throw new Error('Emulator error: ' + value + ' is not a valid boolean.');\n    }\n    return undefined;\n  }\n\n  // Returns the value being fed into this input as an integer. Throws an error if this input is \n  // being fed a value that is not an integer. Returns undefined if this input is not being fed a\n  // value.\n  get asInteger(): number | undefined\n  {\n    let value = this.value;\n    if (typeof value === 'string')\n    {\n      const parsed = parseInt(value);\n      if (isNaN(parsed))\n      {\n        throw new ComponentUsageError('Expected a number, but got ' + value + ' instead.');\n      }\n      return parsed;\n    }\n    return undefined;\n  }\n}\n\nexport class Output\n{\n  // The value that is being outputted. Undefined if we are not outputting anything.\n  #value: string | undefined = undefined;\n  #connection: Bus | undefined;\n\n  constructor(\n    public name: string,\n    public x: number,\n    public y: number,\n  ) { }\n\n  set connection(connection: Bus)\n  {\n    this.#connection = connection;\n  }\n\n  public get used(): boolean\n  {\n    return this.#connection?.used || false;\n  }\n\n  // Returns the value this output is currently outputting, undefined if nothing is being outputted.\n  get value(): string | undefined\n  {\n    return this.#value;\n  }\n\n  get asUserText(): string\n  {\n    let value = this.value;\n    if (value === undefined)\n    {\n      return '?';\n    }\n    return value;\n  }\n\n  // Sets the value of this output. Use undefined to clear the output.\n  set value(value: string | undefined)\n  {\n    this.#value = value;\n  }\n\n  // Sets the value of this output as if it were a boolean. Use undefined to clear the output.\n  set asBoolean(value: boolean | undefined)\n  {\n    if (typeof value === 'boolean')\n    {\n      // This way it also works as a number.\n      this.value = value ? '1' : '0';\n    }\n    else\n    {\n      this.value = undefined;\n    }\n  }\n\n  // Sets the value of this output as if it were an integer. Use undefined to clear the output.\n  set asInteger(value: number | undefined)\n  {\n    if (typeof value === 'number')\n    {\n      this.value = value.toFixed(0);\n    }\n    else\n    {\n      this.value = undefined;\n    }\n  }\n\n  // Clears this output, equivalent to this.value = undefined;\n  public clear()\n  {\n    this.value = undefined;\n  }\n}\n\nexport abstract class LogicComponent\n{\n  // Type is used for error messages, e.g. [type] has no input named [bad name].\n  constructor(\n    d: Datapath,\n    private type: string,\n    public id: string,\n    public x: number,\n    public y: number) { }\n\n  // Evaluates this logic component, updating its outputs accordingly. This is\n  // done when inputs change in between clock cycles.\n  public eval() { }\n\n  // Called when a cycle ends. Eval() will always be called one or more times\n  // before this is called. Example usage of this is in latches, where the\n  // value is only stored at the end of the clock cycle.\n  public evalClock() { }\n\n  // Called when the user requests the processor to be reset.\n  public reset() { }\n\n  // Clear any highlights showing helpful information to the user. Multiple \n  // clock cycles can pass between calls of this function to allow accumulation\n  // of highlights across an entire instruction.\n  public clearHighlights() { }\n\n  // Connects the input with the given name to the provided bus, if it exists.\n  // An error is thrown if it does not exist.\n  public connectInput(name: string, bus: Bus)\n  {\n    let maybeInput = (this as any)[name];\n    if (maybeInput instanceof Input)\n    {\n      bus.connectInput(this, maybeInput);\n    }\n    else\n    {\n      throw new Error(`Emulator error: ${this.type} has no input named ${name}.`);\n    }\n  }\n\n  // Connects the output with the given name to the provided bus, if it exists.\n  // An error is thrown if it does not exist.\n  public connectOutput(name: string, bus: Bus)\n  {\n    let maybeOutput = (this as any)[name];\n    if (maybeOutput instanceof Output)\n    {\n      bus.connectOutput(this, maybeOutput);\n    }\n    else\n    {\n      throw new Error(`Emulator error: ${this.type} has no output named ${name}.`);\n    }\n  }\n\n  // Returns an SVG element that represents this component visually.\n  public abstract render(key: string, d: Datapath): JSX.Element\n}\n\nexport class ComponentUsageError extends Error\n{\n}\n","import React from 'react';\nimport { asUnsignedBits, fromSignedBits } from '../utils/util';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class ALU extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in0 = new Input('in0', 0, 15);\n  public in1 = new Input('in0', 0, 65);\n  public op = new Input('op', 20, 70);\n  public cin = new Input('cin', 30, 65);\n  public out = new Output('out', 40, 40);\n  public flags = new Output('flags', 20, 10);\n  private readonly nBits: number;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"ALU\", id, x, y);\n    this.nBits = params.nbits;\n  }\n\n  // We have performed the math on in0 and in1 to make result, but as\n  // unsigned numbers.  Compute the flag values, and convert result to\n  // a signed number, setting the output connections.\n  finishUp(result: number, in0: number, in1: number)\n  {\n    let flags = 0;\n    let carryBit = 1 << this.nBits;\n    if ((result & carryBit) === carryBit)\n    {\n      flags += 4; // C flag\n      result -= carryBit;\n    }\n    let signBit = carryBit >> 1;\n    let ovf = 0;\n    if ((result & signBit) === signBit)\n    {\n      flags += 1; // N flag\n      ovf += 1;\n    }\n    if ((in0 & signBit) === signBit)\n    {\n      ovf += 4;\n    }\n    if ((in1 & signBit) === signBit)\n    {\n      ovf += 2;\n    }\n    if (ovf === 1 || ovf === 6)\n    {\n      flags += 8; // V flag\n    }\n    if (result === 0)\n    {\n      flags += 2; // Z flag\n    }\n\n    // By converting result back to a signed number, we sign extend it.\n    this.out.asInteger = fromSignedBits(result, this.nBits);\n    this.flags.asInteger = flags;\n  }\n\n  doADD()\n  {\n    const in0 = this.in0.asInteger, in1 = this.in1.asInteger;\n    if (in0 !== undefined && in1 !== undefined)\n    {\n      let result = in0 + in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doSUB()\n  {\n    const in0 = this.in0.asInteger, in1 = this.in1.asInteger;\n    if (in0 !== undefined && in1 !== undefined)\n    {\n      // We will negate B (by complimenting and incrementing it),\n      // then add the two numbers.\n      const negin1 = asUnsignedBits((~in1) + 1, this.nBits);\n      let result = in0 + negin1;\n      this.finishUp(result, in0, negin1);\n    }\n  }\n\n  doAND()\n  {\n    const in0 = this.in0.asInteger, in1 = this.in1.asInteger;\n    if (in0 !== undefined && in1 !== undefined)\n    {\n      let result = in0 & in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doOR()\n  {\n    const in0 = this.in0.asInteger, in1 = this.in1.asInteger;\n    if (in0 !== undefined && in1 !== undefined)\n    {\n      let result = in0 | in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doXOR()\n  {\n    const in0 = this.in0.asInteger, in1 = this.in1.asInteger;\n    if (in0 !== undefined && in1 !== undefined)\n    {\n      let result = in0 ^ in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doINC()\n  {\n    const in0 = this.in0.asInteger;\n    if (in0 !== undefined)\n    {\n      let result = in0 + 1;\n      this.finishUp(result, in0, 1);\n    }\n  }\n\n  doINCB()\n  {\n    const in1 = this.in1.asInteger;\n    if (in1 !== undefined)\n    {\n      let result = in1 + 1;\n      this.finishUp(result, 1, in1);\n    }\n  }\n\n  doDEC()\n  {\n    const in0 = this.in0.asInteger;\n    if (in0 !== undefined)\n    {\n      let in1 = asUnsignedBits(-1, this.nBits);\n      let result = in0 + in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doDECB()\n  {\n    const in1 = this.in1.asInteger;\n    if (in1 !== undefined)\n    {\n      let in0 = asUnsignedBits(-1, this.nBits);\n      let result = in0 + in1;\n      this.finishUp(result, in0, in1);\n    }\n  }\n\n  doCMA()\n  {\n    const in0 = this.in0.asInteger;\n    if (in0 !== undefined)\n    {\n      let result = asUnsignedBits(~in0, this.nBits);\n      this.finishUp(result, in0, 0);\n    }\n  }\n\n  doNEG()\n  {\n    const in0 = this.in0.asInteger;\n    if (in0 !== undefined)\n    {\n      let result = asUnsignedBits((~in0) + 1, this.nBits);\n      this.finishUp(result, in0, 0);\n    }\n  }\n\n  doRAL()\n  {\n    const in0 = this.in0.asInteger, cin = this.cin.asBoolean;\n    if (in0 !== undefined && cin !== undefined)\n    {\n      let result = (in0 << 1) + (cin ? 1 : 0);\n      this.finishUp(result, in0, 0);\n    }\n  }\n\n  doRAR()\n  {\n    const in0 = this.in0.asInteger, cin = this.cin.asBoolean;\n    if (in0 !== undefined && cin !== undefined)\n    {\n      let carryBit = 1 << this.nBits;\n      let tmp = in0 & 1;\n      let result = in0;\n      if (cin)\n      {\n        result += carryBit;\n      }\n      result = result >> 1;\n      if (tmp !== 0)\n      {\n        result |= carryBit;\n      }\n      this.finishUp(result, in0, 0);\n    }\n  }\n\n  doZERO()\n  {\n    this.out.asInteger = 0;\n    this.flags.asInteger = 2 // Z flag\n  }\n\n  doONES()\n  {\n    this.out.asInteger = -1;\n    this.flags.asInteger = 1; // N flag\n  }\n\n  public eval()\n  {\n    // If any of the opcode-specific fns exit early, we will be left with this.\n    this.out.clear();\n    this.flags.clear();\n    let op = this.op.value;\n    if (op === undefined)\n    {\n      return;\n    }\n    switch (op)\n    {\n      case 'ADD':\n        this.doADD();\n        break;\n      case 'AND':\n        this.doAND();\n        break;\n      case 'INC':\n        this.doINC();\n        break;\n      case 'INCB':\n        this.doINCB();\n        break;\n      case 'DEC':\n        this.doDEC();\n        break;\n      case 'DECB':\n        this.doDECB();\n        break;\n      case 'ZERO':\n        this.doZERO();\n        break;\n      case 'RAL':\n        this.doRAL();\n        break;\n      case 'RAR':\n        this.doRAR();\n        break;\n      case 'CMA':\n        this.doCMA();\n        break;\n      case 'NEG':\n        this.doNEG();\n        break;\n      case 'ONES':\n        this.doONES();\n        break;\n      case 'SUB':\n        this.doSUB();\n        break;\n      case 'OR':\n        this.doOR();\n        break;\n      case 'XOR':\n        this.doXOR();\n        break;\n      default:\n        throw new Error('Evaluating ALU ' + this.id + ': Op input has unknown value ' + op);\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<ALUView key={k} c={this} d={d} />)\n  }\n}\n\nclass ALUView extends React.Component<{ c: ALU, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    return (\n      <g transform={xfrm} className=\"component\">\n        <path d='M0 0 L40 20 V60 L0 80 V50 L20 40 L0 30 Z' />\n      </g>);\n  }\n};\n","import React from 'react';\nimport { LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Control extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public out: Output;\n  // Values that this control can be. If undefined, then this is a simple \n  // true/false control.\n  #options: Array<string> | undefined;\n  readonly width: number;\n  readonly height: number = 20;\n  // 0,1 for bool control, 0-len for option control.\n  #value: number = 0;\n  public readonly name: string;\n  public readonly top: boolean;\n\n  constructor(\n    d: Datapath,\n    id: string,\n    x: number,\n    y: number,\n    params: any)\n  {\n    super(d, \"Control\", id, x, y);\n\n    let top = params.top !== false;\n    this.top = top;\n    let name: string = params.name || 'Unnamed';\n    this.name = name;\n    let options = params.options;\n    this.#options = options;\n    this.width = params.wid || 60;\n\n    if (this.#options !== undefined)\n    {\n      this.#options.splice(0, 0, 'none');\n    }\n    if (top)\n    {\n      this.out = new Output('out', this.width / 2, 0);\n    }\n    else\n    {\n      this.out = new Output('out', this.width, this.height / 2);\n    }\n  }\n\n  public eval()\n  {\n    if (this.#options === undefined)\n    {\n      // Boolean control.\n      this.out.asBoolean = this.#value === 1;\n    }\n    else\n    {\n      // Option control.\n      if (this.#value === 0)\n      {\n        this.out.clear();\n      }\n      else\n      {\n        this.out.value = this.#options[this.#value];\n      }\n    }\n  }\n\n  public reset()\n  {\n    this.#value = 0;\n  }\n\n  get label()\n  {\n    if (this.#options === undefined)\n    {\n      return this.name;\n    }\n    else\n    {\n      return this.#options[this.#value];\n    }\n  }\n\n  get active()\n  {\n    return this.#value > 0;\n  }\n\n  public toggle()\n  {\n    if (this.#options === undefined)\n    {\n      this.#value = 1 - this.#value;\n    }\n    else\n    {\n      this.#value = (this.#value + 1) % this.#options.length;\n    }\n  }\n\n  // Use the value returned by this in setValue(). It will throw an error if \n  // you cannot use the specified setting on this control.\n  public getValueOfOption(option: boolean | string): number\n  {\n    if (this.#options === undefined)\n    {\n      if (option === true) return 1;\n      else if (option === false) return 0;\n      else throw new Error(this.name + ' does not have custom options, you must use true/false instead.');\n    }\n    else\n    {\n      if (typeof option === 'boolean')\n        throw new Error(this.name + ' has custom options, it cannot be set with true/false.');\n      for (let i = 0; i < this.#options.length; i++)\n      {\n        if (this.#options[i] === option)\n        {\n          return i;\n        }\n      }\n      throw new Error(this.name + ' has no option named ' + option);\n    }\n  }\n\n  // This function does not check if the provided value is valid.\n  public setValue(value: number)\n  {\n    this.#value = value;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<ControlView key={k} c={this} d={d} />)\n  }\n}\n\nclass ControlView extends React.Component<{ c: Control, d: Datapath }>\n{\n  render()\n  {\n    const { x, y, width, height, label, active } = this.props.c;\n    const offset = 4;\n    const lx = x;\n    const vx = lx + offset;\n    const ly = y;\n    const hy = y + height - offset;\n    const labelStyle = { x: vx, y: hy };\n    const rectClass = 'control ' + (active ? 'active' : 'inactive');\n    const handleClick = () =>\n    {\n      // Turn off the decoder if the user wants to change something manually.\n      this.props.d.decoderEnabled = false;\n      this.props.c.toggle();\n      this.props.d.eval()\n    };\n    return (\n      <g className=\"component\" onClick={handleClick}>\n        <rect className={rectClass} x={lx} y={ly} width={width} height={height} />\n        <text className=\"label\" {...labelStyle}>{label}</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { ComponentUsageError, Input, LogicComponent, Output } from \"./component\";\nimport { Control } from './control';\nimport { Datapath } from './datapath';\n\n// This is microcode as specified in a JSON file. It may or may not be legal\n// depending on what the rest of the datapath looks like. Format of controls\n// is [CONTROL_NAME] for simple true/false controls and [CONTROL_NAME]:[VALUE]\n// for controls with custom options..\nexport interface UnparsedDecoderMicrocode\n{\n  clockCycleNames: Array<string>,\n  fetchCycleStep: string,\n  instructions: Array<string>,\n}\n\n// This parses bits that come on ends of expressions embedded in messages as\n// parsed by parseCompleteMessage(). For example, this function would parse the\n// conditional portion in \"<Flags?Skipped:Did not skip> the next instruction.\"\nfunction makeProceduralPiece(input: string, valueSource: Output, datapath: Datapath): () => string\n{\n  if (input.includes('-'))\n  {\n    const decrement = input.split('-')[1];\n    const pdec = parseInt(decrement);\n    return () =>\n    {\n      const v = valueSource.value;\n      console.log(v);\n      return v === undefined ? '?' : '' + (parseInt(v) - pdec);\n    }\n  }\n  else if (input.includes('+'))\n  {\n    const decrement = input.split('+')[1];\n    const pdec = parseInt(decrement);\n    return () =>\n    {\n      const v = valueSource.value;\n      console.log(v);\n      return v === undefined ? '?' : '' + (parseInt(v) + pdec);\n    }\n  }\n  else if (input.includes('?'))\n  {\n    const choicestr = input.split('?')[1];\n    const choices = choicestr.split(':');\n    return () =>\n    {\n      const v = valueSource.value;\n      console.log(v);\n      if (v === 'true' || v === '1')\n      {\n        return choices[0];\n      }\n      else\n      {\n        return choices[1];\n      }\n    }\n  }\n  else\n  {\n    return () =>\n    {\n      const v = valueSource.value;\n      return v === undefined ? '?' : v;\n    };\n  }\n}\n\n// This is responsible for parsing the description of a message that should display\n// when the instruction finishes executing.\nfunction parseMessageExpression(input: string, datapath: Datapath): () => string\n{\n  let pieces: Array<() => string> = [];\n  let buffer = '';\n  let parsingExpr = false;\n  for (const c of input)\n  {\n    if (c === '<' && !parsingExpr)\n    {\n      const copied = '' + buffer;\n      pieces.push(() => copied);\n      buffer = '';\n      parsingExpr = true;\n    }\n    else if (c === '>' && parsingExpr)\n    {\n      const compId = buffer.split(/[-+?]/)[0];\n      let success = false;\n      for (const c of datapath.components)\n      {\n        if (c.id === compId)\n        {\n          success = true;\n          const output = (c as any).out;\n          if (output instanceof Output)\n          {\n            pieces.push(makeProceduralPiece(buffer, output, datapath));\n          }\n          else\n          {\n            throw new Error('The component ' + compId + ' does not have an output named \"out\", so it cannot be used in this expression:\\n' + input);\n          }\n        }\n      }\n      if (!success)\n      {\n        throw new Error('There is no component with ID ' + compId);\n      }\n      buffer = '';\n      parsingExpr = false;\n    }\n    else\n    {\n      buffer += c;\n    }\n  }\n  pieces.push(() => buffer);\n  return () =>\n  {\n    let result = '';\n    for (const piece of pieces)\n    {\n      result += piece();\n    }\n    return result;\n  };\n}\n\nclass StepResult\n{\n  // If nextCycle is -1, indicates default.\n  constructor(public readonly makeMessage: boolean, public readonly nextCycleOverride: number) { }\n}\n\n// Parses a list of controls that will be activated during a cycle.\nfunction parseControlList(\n  cycleNames: Array<string>,\n  input: string,\n  datapath: Datapath,\n  isLast: boolean,\n  previousMessageOverride: boolean\n): () => StepResult\n{\n  // Otherwise we will try and parse a control with a blank name.\n  if (input.trim().length === 0) return () => new StepResult(false, -1);\n  let actions: Array<{ control: Control, value: number }> = [];\n  let makeMessage = false;\n  let cycleOverride = -1;\n  if (isLast)\n  {\n    cycleOverride = 0;\n    // Automatically generate the message on the last cycle, unless the user had\n    // previously set where the message should be generated.\n    makeMessage = !previousMessageOverride;\n  }\n  for (const controlDesc of input.trim().split(','))\n  {\n    const parts = controlDesc.trim().split(':');\n    const cname = parts[0];\n    let option: true | string = true;\n    if (parts.length > 1)\n    {\n      option = parts[1];\n    }\n    let success = false;\n    for (const control of datapath.controls)\n    {\n      if (control.name === cname)\n      {\n        success = true;\n        const value = control.getValueOfOption(option);\n        actions.push({ control, value });\n        break;\n      }\n    }\n    if (cname === \"!message\")\n    {\n      makeMessage = true;\n    }\n    else if (cname === \"!next\")\n    {\n      if (option === true)\n      {\n        throw new Error('!next must be followed by the name of a cycle, E.G. !next:t1');\n      }\n      cycleOverride = cycleNames.indexOf(option);\n      if (cycleOverride === -1)\n      {\n        throw new Error('There is no cycle named ' + option);\n      }\n    }\n    else if (!success)\n    {\n      throw new Error('There is no control named ' + cname);\n    }\n  }\n  return () =>\n  {\n    for (const { control, value } of actions)\n    {\n      control.setValue(value);\n    }\n    return new StepResult(makeMessage, cycleOverride);\n  };\n}\n\nfunction parseDecoderMicrocode(input: UnparsedDecoderMicrocode, datapath: Datapath): DecoderMicrocode\n{\n  const result = new DecoderMicrocode();\n  result.clockCycleNames = input.clockCycleNames;\n  const cnames = result.clockCycleNames;\n  result.fetchCycleAction = parseControlList(cnames, input.fetchCycleStep, datapath, false, false);\n  for (const instr of input.instructions)\n  {\n    const parts = instr.trim().split(';');\n    const completeMessage = parts[0];\n    const opcode = parts[1];\n    const steps = parts.slice(2);\n    if (steps.length > result.clockCycleNames.length - 1)\n    {\n      throw new Error('The instruction ' + opcode + ' has too many steps! Try adding another step to clockCycleNames.');\n    }\n    let parsedSteps = [];\n    let pmo = false;\n    for (let i = 0; i < steps.length; i++)\n    {\n      let last = i === steps.length - 1;\n      let parsed = parseControlList(cnames, steps[i].trim(), datapath, last, pmo);\n      parsedSteps.push(parsed);\n      // Keep track of whether or not the user has specified on which cycle the\n      // message should be generated.\n      pmo = pmo || steps[i].includes('!message');\n    }\n    result.instructions.push({\n      opcode: opcode.trim(),\n      messageGenerator: parseMessageExpression(completeMessage, datapath),\n      steps: parsedSteps,\n    });\n  }\n  return result;\n}\n\nclass DecoderInstruction\n{\n  opcode = \"\";\n  messageGenerator = () => \"\";\n  steps: Array<() => StepResult> = [];\n}\n\nclass DecoderMicrocode\n{\n  clockCycleNames: Array<string> = ['t0'];\n  fetchCycleAction = () => new StepResult(false, -1);\n  instructions: Array<DecoderInstruction> = [];\n}\n\nexport class Decoder extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 0, 10);\n  #enabled = true;\n  #datapath: Datapath;\n  #microcode: DecoderMicrocode;\n  #currentCycle = 0;\n  #lastInstrDesc = '';\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Decoder\", id, x, y);\n    d.decoder = this;\n    this.#datapath = d;\n    this.#microcode = new DecoderMicrocode();\n  }\n\n  public get enabled(): boolean\n  {\n    return this.#enabled;\n  }\n\n  public set enabled(value: boolean)\n  {\n    this.#enabled = value;\n    this.#datapath.eval();\n  }\n\n  public loadMicrocode(input: UnparsedDecoderMicrocode)\n  {\n    this.#microcode = parseDecoderMicrocode(input, this.#datapath);\n  }\n\n  public get statusDesc(): string\n  {\n    return this.#microcode.clockCycleNames[this.#currentCycle];\n  }\n\n  private getCurrentInstruction(): DecoderInstruction\n  {\n    const currentInstruction = this.in.value;\n    if (currentInstruction === undefined)\n    {\n      throw new ComponentUsageError('Uninitialized value used as instruction.');\n    }\n    const opcode = currentInstruction.trim().split(' ').reverse().pop();\n    if (opcode === undefined)\n    {\n      throw new ComponentUsageError(currentInstruction + ' is not a valid instruction.');\n    }\n    for (const instr of this.#microcode.instructions)\n    {\n      if (instr.opcode === opcode)\n      {\n        return instr;\n      }\n    }\n    throw new ComponentUsageError(opcode + ' is not a valid instruction opcode.');\n  }\n\n  private doCurrentStepAction(): StepResult\n  {\n    if (this.#currentCycle === 0)\n    {\n      return this.#microcode.fetchCycleAction();\n    }\n    else if (this.in.value === 'HLT')\n    {\n      // This is special cased because the clock (and correspondingly halting) \n      // is controlled by regular javascript code and has no corresponding \n      // component.\n      this.#datapath.haltRequested = true;\n    }\n    else\n    {\n      const steps = this.getCurrentInstruction().steps;\n      if (this.#currentCycle - 1 < steps.length)\n      {\n        return steps[this.#currentCycle - 1]();\n      }\n    }\n    return new StepResult(false, -1);\n  }\n\n  public eval()\n  {\n    if (!this.#enabled) return;\n    const d = this.#datapath;\n    for (const c of d.controls)\n    {\n      c.reset();\n    }\n    const after = this.doCurrentStepAction();\n    if (this.in.value !== undefined && this.in.value !== 'HLT')\n    {\n      const ci = this.getCurrentInstruction();\n      if (after.makeMessage)\n      {\n        this.#lastInstrDesc = ci.messageGenerator();\n      }\n    }\n  }\n\n  public evalClock()\n  {\n    if (!this.#enabled) return;\n    const after = this.doCurrentStepAction();\n    if (after.nextCycleOverride >= 0)\n    {\n      this.#currentCycle = after.nextCycleOverride;\n    } else\n    {\n      this.#currentCycle += 1;\n      if (this.#currentCycle === this.#microcode.clockCycleNames.length)\n      {\n        this.#currentCycle = 0;\n      }\n    }\n    this.#datapath.decoderCycleFinished = this.#currentCycle === 0;\n  }\n\n  // Call this after an instruction has completed to get a description of what\n  // just happened.\n  public getInstructionDescription(): string\n  {\n    if (this.in.value === 'HLT')\n    {\n      return 'Processor halted.';\n    }\n    else\n    {\n      return this.#lastInstrDesc;\n    }\n  }\n\n  public reset()\n  {\n    this.#currentCycle = 0;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<DecoderView key={k} c={this} d={d} />)\n  }\n}\n\nclass DecoderView extends React.Component<{ c: Decoder, d: Datapath }>\n{\n  render()\n  {\n    const { x, y, enabled, statusDesc } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    const handleClick = () =>\n    {\n      this.props.c.enabled = !enabled;\n      if (this.props.c.enabled === false)\n      {\n        for (const c of this.props.d.controls)\n        {\n          c.reset();\n        }\n      }\n      this.props.d.eval();\n    };\n    return (\n      <g transform={xfrm} className=\"component\" onClick={handleClick}>\n        <rect x={0} y={0} width={50} height={20} className={enabled ? 'active' : 'inactive'} />\n        <text className=\"small-label\" x={25} y={13} textAnchor=\"middle\">decoder</text>\n        <text className=\"value\" x={0} y={35}>{statusDesc}</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { asUnsignedBits } from '../utils/util';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Expand extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 0, 25);\n  public out = new Output('out', 20, 25);\n  public readonly inNBits: number;\n  public readonly outNBits: number;\n  public readonly extend: boolean;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Expand\", id, x, y);\n    this.inNBits = params.inNBits;\n    this.outNBits = params.outNBits;\n    this.extend = params.extend === true;\n  }\n\n  public eval()\n  {\n    let strValue = this.in.value;\n    if (strValue=== undefined)\n    {\n      this.out.clear();\n      return;\n    }\n    let value = parseInt(strValue.trim().split(' ').pop() || 'asdfasdf');\n    value = asUnsignedBits(value, this.inNBits);\n    let outValue = asUnsignedBits(value, this.outNBits);\n    if (this.outNBits > this.inNBits && this.extend)\n    {\n      // We need to sign-extend the number.\n      const signBit = 1 << (this.inNBits - 1);\n      if ((value & signBit) !== 0)\n      {\n        let bits = (1 << this.outNBits) - (1 << this.inNBits);\n        outValue |= bits;\n      }\n    }\n    this.out.asInteger = outValue;\n    this.in.used = this.out.used;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<ExpandView key={k} c={this} d={d} />)\n  }\n}\n\nclass ExpandView extends React.Component<{ c: Expand, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    return (\n      <g transform={xfrm} className=\"component\">\n        <line key={3} x1={0} y1={10} x2={0} y2={40} />\n        <line key={4} x1={0} y1={10} x2={20} y2={0} />\n        <line key={5} x1={0} y1={40} x2={20} y2={50} />\n        <line key={6} x1={20} y1={0} x2={20} y2={50} />\n      </g>);\n  }\n};\n","/* eslint no-throw-literal: \"off\" */\r\n\r\n// src/utils/MemoryCell.js - A register for the processor\r\n// Stores its name so it can report errors when using valueAsNumber.\r\n// The memory is made up of a list of registers.\r\n\r\n// Describes the last thing a register was used for.\r\nexport type CellUse = 'none' | 'read' | 'write' | 'error' | 'instruction' | 'jump_target' | 'address';\r\n\r\nexport class DataCell<T>\r\n{\r\n  #label: string;\r\n  #value: T | undefined = undefined;\r\n  lastUse: CellUse = 'none';\r\n\r\n  constructor(label: string)\r\n  {\r\n    this.#label = label;\r\n  };\r\n\r\n  clearLastUse()\r\n  {\r\n    this.lastUse = 'none';\r\n  }\r\n\r\n  // Add this CSS class to an object to color it based on how this memory cell\r\n  // was last used.\r\n  get lastUseCssClass(): string\r\n  {\r\n    return 'use_' + this.lastUse;\r\n  }\r\n\r\n  get label(): string\r\n  {\r\n    return this.#label;\r\n  }\r\n\r\n  set value(value: T | undefined)\r\n  {\r\n    this.#value = value;\r\n  }\r\n\r\n  get value(): T | undefined\r\n  {\r\n    return this.#value;\r\n  }\r\n}\r\n\r\nexport class MemoryCell extends DataCell<string> { }\r\nexport class FlagCell extends DataCell<boolean> { }\r\n","import React from 'react';\nimport { FlagCell } from '../utils/memory_cells';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nfunction maybeNot(val: boolean | undefined): boolean | undefined \n{\n  if (val === undefined)\n  {\n    return val;\n  }\n  else\n  {\n    return !val;\n  }\n}\n\nfunction maybeBit(val: number | undefined, bit: number): boolean | undefined\n{\n  if (val === undefined)\n  {\n    return undefined;\n  }\n  else\n  {\n    return (val & (0b1 << bit)) > 0;\n  }\n}\n\nfunction bitName(val: boolean | undefined): string\n{\n  if (val === undefined)\n  {\n    return \"?\";\n  }\n  else if (val === true)\n  {\n    return \"T\";\n  }\n  else\n  {\n    return \"F\";\n  }\n}\n\nexport class FlagLogic extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 30, 30);\n  public op = new Input('op', 0, 15);\n  public out = new Output('out', 30, 0);\n  public flagN = new FlagCell('NEG');\n  public flagZ = new FlagCell('ZERO');\n  public flagC = new FlagCell('CARRY');\n  public flagV = new FlagCell('V');\n  public flagTZ = new FlagCell('TZ');\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"FlagLogic\", id, x, y);\n    d.visibleFlags.push(this.flagC);\n    d.visibleFlags.push(this.flagZ);\n    d.visibleFlags.push(this.flagN);\n  }\n\n  public eval()\n  {\n    this.out.clear();\n    const op = this.op.value;\n    if (op === undefined)\n    {\n      return;\n    }\n    let val: boolean | undefined = undefined;\n    switch (op)\n    {\n      case 'RDTZ':\n        val = this.flagTZ.value;\n        break;\n      case 'RDC':\n        val = this.flagC.value;\n        break;\n      case 'RDZ':\n        val = this.flagZ.value;\n        break;\n      case 'RDN':\n        val = this.flagN.value;\n        break;\n      case 'RDV':\n        val = this.flagV.value;\n        break;\n      case 'RDNC':\n        val = maybeNot(this.flagC.value);\n        break;\n      case 'RDNZ':\n        val = maybeNot(this.flagZ.value);\n        break;\n      case 'RDNN':\n        val = maybeNot(this.flagN.value);\n        break;\n      case 'RDNV':\n        val = maybeNot(this.flagV.value);\n        break;\n      case 'ROT':\n        val = this.flagC.value;\n        this.in.used = true;\n        break;\n      case 'LDZ':\n      case 'LDALL':\n      case 'LDTZ':\n      case 'CLC':\n      case 'STC':\n      case 'CMC':\n        this.in.used = true;\n        break;\n      default:\n        throw new Error('Evaluating DPFlagLogic ' + this.id + ': Op input has unknown value ' + op);\n    }\n    this.out.asBoolean = val;\n  }\n\n  // In this code, we capture the input flag values (as controlled by the op.)\n  public evalClock()\n  {\n    const op = this.op.value;\n    if (op === undefined)\n    {\n      return;\n    }\n    const inval = this.in.asInteger;\n    switch (op)\n    {\n      case 'RDTZ':\n      case 'RDC':\n      case 'RDZ':\n      case 'RDN':\n      case 'RDV':\n      case 'RDNC':\n      case 'RDNZ':\n      case 'RDNN':\n      case 'RDNV':\n        return;\n      case 'ROT':\n        this.flagC.value = maybeBit(inval, 1);\n        break;\n      case 'LDZ':\n        this.flagZ.value = maybeBit(inval, 1);\n        break;\n      case 'LDALL':\n        this.flagN.value = maybeBit(inval, 0);\n        this.flagZ.value = maybeBit(inval, 1);\n        this.flagC.value = maybeBit(inval, 2);\n        this.flagV.value = maybeBit(inval, 3);\n        break;\n      case 'LDTZ':\n        this.flagZ.value = maybeBit(inval, 1);\n        break;    \n      case 'CLC': \n        this.flagC.value = false;\n        break;    \n      case 'STC': \n        this.flagC.value = true;\n        break;    \n      case 'CMC': \n        this.flagC.value = maybeNot(this.flagC.value);\n        break;                                \n      default:                                \n        throw new Error('Evaluating DPFlagLogic ' + this.id + ': Op input has unknown value ' + op);\n    }\n  }\n\n  public reset()\n  {\n    this.flagC.value = false;\n    this.flagN.value = false;\n    this.flagTZ.value = false;\n    this.flagV.value = false;\n    this.flagZ.value = false;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<FlagLogicView key={k} c={this} d={d} />)\n  }\n}\n\nclass FlagLogicView extends React.Component<{ c: FlagLogic, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    let c = this.props.c;\n    const i = this.props.c.in.asInteger;\n    const inStr = bitName(maybeBit(i, 4))\n      + ' ' + bitName(maybeBit(i, 3))\n      + ' ' + bitName(maybeBit(i, 2))\n      + ' ' + bitName(maybeBit(i, 1))\n      + ' ' + bitName(maybeBit(i, 0));\n    const outStr = bitName(c.flagTZ.value)\n      + ' ' + bitName(c.flagV.value)     \n      + ' ' + bitName(c.flagC.value)     \n      + ' ' + bitName(c.flagZ.value)     \n      + ' ' + bitName(c.flagN.value);\n    return (\n      <g transform={xfrm} className=\"component\">\n        <path d='M0 0 H 60 V 30 H 0 Z' />\n        <text className=\"small-label\" x={30} y={10} textAnchor=\"middle\"  >{outStr}</text>\n        <text className=\"small-label\" x={30} y={19} textAnchor=\"middle\" >T V C Z N</text>\n        <text className=\"small-label\" x={30} y={28} textAnchor=\"middle\" >{inStr}</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class And extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in0 = new Input('in0', 0, 5);\n  public in1 = new Input('in1', 0, 15);\n  public out = new Output('out', 20, 10);\n\n  constructor(d: Datapath, id: string, x: number, y: number, _params: any)\n  {\n    super(d, \"And\", id, x, y);\n  }\n\n  public eval()\n  {\n    const a = this.in0.asBoolean, b = this.in1.asBoolean;\n    if (a === undefined || b === undefined)\n    {\n      this.out.clear();\n    }\n    else\n    {\n      this.out.asBoolean = a && b;\n      this.in0.used = this.out.used && a && b;\n      this.in1.used = this.out.used && a && b;\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<AndView key={k} c={this} d={d} />)\n  }\n}\n\nclass AndView extends React.Component<{ c: And, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = `translate(${x}, ${y})`;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <path d='M0 0 H10 A10 10 0 0 1 10 20 H 0 Z' />\n      </g>);\n  }\n};\n\nexport class Or extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in0 = new Input('in0', 0, 5);\n  public in1 = new Input('in1', 0, 15);\n  public out = new Output('out', 20, 10);\n\n  constructor(d: Datapath, id: string, x: number, y: number, _params: any)\n  {\n    super(d, \"Or\", id, x, y);\n  }\n\n  public eval()\n  {\n    const a = this.in0.asBoolean, b = this.in1.asBoolean;\n    if (a === undefined || b === undefined)\n    {\n      this.out.clear();\n    }\n    else\n    {\n      this.out.asBoolean = a || b;\n      this.in0.used = this.out.used && a;\n      this.in1.used = this.out.used && b;\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<OrView key={k} c={this} d={d} />)\n  }\n}\n\nclass OrView extends React.Component<{ c: Or, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = `translate(${x}, ${y})`;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <path d='M-3.7 0 A33 33 0 0 1 20 10 A33 33 0 0 1 -3.7 20 A13 13 0 0 0 -3.7 0 Z' />\n      </g>);\n  }\n};\n\nexport class AndOr extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in0 = new Input('in0', 20, 5);\n  public in1 = new Input('in1', 0, 15);\n  public in2 = new Input('in2', 0, 25);\n  public out = new Output('out', 40, 10);\n\n  constructor(d: Datapath, id: string, x: number, y: number, _params: any)\n  {\n    super(d, \"AndOr\", id, x, y);\n  }\n\n  public eval()\n  {\n    const a = this.in0.asBoolean, b = this.in1.asBoolean, c = this.in2.asBoolean;\n    if ((a === true) || ((b === true) && (c === true)))\n    {\n      this.out.asBoolean = true;\n    }\n    else if (a === undefined || b === undefined || c === undefined)\n    {\n      this.out.clear();\n    }\n    else\n    {\n      this.out.asBoolean = false;\n    }\n    if (a !== undefined) this.in0.used = this.out.used && a;\n    if ((b !== undefined) && (c !== undefined)) \n    {\n      this.in1.used = this.out.used && b && c;\n      this.in2.used = this.out.used && b && c;\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<AndOrView key={k} c={this} d={d} />)\n  }\n}\n\nclass AndOrView extends React.Component<{ c: AndOr, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = `translate(${x}, ${y})`;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <path d='M16.3 0 A33 33 0 0 1 40 10 A33 33 0 0 1 16.3 20 A13 13 0 0 0 16.3 0 Z' />\n        <path d='M0 10 H10 A10 10 0 0 1 10 30 H 0 Z' />\n      </g>);\n  }\n};\n\n\n\n","import React from 'react';\nimport { asUnsignedBits } from '../utils/util';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Incrementer extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 0, 15);\n  public out = new Output('out', 30, 15);\n  public readonly nbits: number;\n  public readonly constant: number;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Incrementer\", id, x, y);\n    this.nbits = params.nbits;\n    this.constant = params.constant;\n  }\n\n  public eval()\n  {\n    let value = this.in.asInteger;\n    if (value === undefined)\n    {\n      this.out.clear();\n      return;\n    }\n    value = asUnsignedBits(value, this.nbits) + this.constant;\n    this.out.asInteger = asUnsignedBits(value, this.nbits);\n    this.in.used = this.out.used;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<IncrementerView key={k} c={this} d={d} />)\n  }\n}\n\nclass IncrementerView extends React.Component<{ c: Incrementer, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    const constant = this.props.c.constant;\n    const label = ((constant >= 0) ? '+' : '') + constant;\n    const value = this.props.c.out.asUserText;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <circle cx={15} cy={15} r={15} />\n        <text x={15} y={20} textAnchor=\"middle\" className=\"label\">{label}</text>\n        <text x={33} y={12} className=\"value\">{value}</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { MemoryCell } from '../utils/memory_cells';\nimport { asUnsignedBits, fromSignedBits } from '../utils/util';\nimport { ComponentUsageError, Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Latch extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 0, 10);\n  public load = new Input('load', 10, 50);\n  public out = new Output('out', 30, 10);\n  public readonly name: string;\n  public readonly resetValue: string | undefined;\n  public readonly nbits: number | undefined;\n  public data: MemoryCell;\n  public readonly signed: boolean;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Latch\", id, x, y);\n    this.name = params.name || \"Unnamed\";\n    this.data = new MemoryCell(this.name);\n    this.resetValue = params.resetValue;\n    if (this.resetValue !== undefined)\n    {\n      this.resetValue = '' + this.resetValue;\n    }\n    this.nbits = params.nbits;\n    if (params.visible === true)\n    {\n      d.visibleRegisters.push(this.data);\n    }\n    this.signed = params.signed !== false;\n  }\n\n  public eval()\n  {\n    this.out.value = this.data.value;\n    this.in.used = this.load.asBoolean === true;\n    this.load.used = this.load.asBoolean === true;\n  }\n\n  public evalClock()\n  {\n    if (this.load.asBoolean === true)\n    {\n      if (this.nbits === undefined)\n      {\n        this.data.value = this.in.value;\n      }\n      else\n      {\n        let value = this.in.asInteger;\n        if (value !== undefined)\n        {\n          if (this.signed)\n          {\n            value = fromSignedBits(value, this.nbits);\n          }\n          else\n          {\n            value = asUnsignedBits(value, this.nbits);\n          }\n          this.data.value = '' + value;\n        }\n        else\n        {\n          this.data.value = undefined;\n        }\n      }\n      if (this.data.value === undefined)\n      {\n        this.data.lastUse = 'error';\n        throw new ComponentUsageError('Register ' + this.name + ' assigned invalid/uninitialized data.');\n      }\n      else\n      {\n        this.data.lastUse = 'write';\n      }\n    }\n    else if (this.data.value !== undefined && this.out.used && this.data.lastUse === 'none')\n    {\n      this.data.lastUse = 'read';\n    }\n  }\n\n  public reset()\n  {\n    this.data.value = this.resetValue;\n  }\n\n  public clearHighlights()\n  {\n    this.data.clearLastUse();\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<LatchView key={k} c={this} d={d} />)\n  }\n}\n\nclass LatchView extends React.Component<{ c: Latch, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    const label = this.props.c.name;\n    const value = this.props.c.data.value;\n    const fval = value === undefined ? '?' : value;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <rect x={0} y={0} width={30} height={50} className={this.props.c.data.lastUseCssClass} />\n        <text className=\"label\" x={15} y={23} textAnchor=\"middle\">{label}</text>\n        <text className=\"value\" x={0} y={-2}>{fval}</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { MemoryCell, CellUse } from '../utils/memory_cells';\nimport { ComponentUsageError, Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class MainMemory extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public addr: Input;\n  public memr: Input;\n  public memw: Input;\n  public din: Input;\n  public dout: Output;\n  // Use these to highlight a memory address with what it was used for.\n  public highlight_instr = new Input(\"highlight_instr\", 0, 400);\n  public highlight_jumpt = new Input(\"highlight_jumpt\", 0, 425);\n  public highlight_addr = new Input(\"highlight_addr\", 0, 450);\n  public readonly addrbits: number;\n  public readonly databits: number;\n  public readonly length: number;\n  #cells: Array<MemoryCell>;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"MainMemory\", id, x, y);\n    this.addrbits = params.addrbits;\n    this.databits = params.databits;\n    this.length = 1 << this.addrbits;\n    this.#cells = [];\n    for (let i = 0; i < this.length; i++)\n    {\n      this.#cells.push(new MemoryCell(`Memory Cell ${i}`));\n    }\n    d.mainMemoryBlock = this.#cells;\n\n    this.addr = new Input('addr', 0, params.addrY || 0);\n    this.memr = new Input('memr', 0, params.memrY || 0);\n    this.memw = new Input('memw', 0, params.memwY || 0);\n    this.din = new Input('din', 0, params.dataY || 0);\n    this.dout = new Output('dout', 0, (params.dataY || 0) - 20);\n  }\n\n  public eval()\n  {\n    this.dout.clear();\n    const addr = this.addr.asInteger;\n    if (addr === undefined) return;\n    if (addr >= this.length || addr < 0)\n    {\n      throw new ComponentUsageError('there is no memory cell at address ' + addr);\n    }\n    if (this.memr.asBoolean === true)\n    {\n      if (this.memw.asBoolean === true) return;\n      this.dout.value = this.#cells[addr].value;\n      this.addr.used = true;\n      this.memr.used = true;\n    }\n    else if (this.memw.asBoolean === true)\n    {\n      this.addr.used = true;\n      this.din.used = true;\n      this.memw.used = true;\n    }\n    if (this.highlight_instr.asBoolean === true) this.highlight_instr.used = true;\n    if (this.highlight_jumpt.asBoolean === true) this.highlight_jumpt.used = true;\n    if (this.highlight_addr.asBoolean === true) this.highlight_addr.used = true;\n    if (\n      this.highlight_instr.asBoolean === true\n      || this.highlight_jumpt.asBoolean === true\n      || this.highlight_addr.asBoolean === true\n    )\n    {\n      this.addr.used = true;\n    }\n  }\n\n  public evalClock()\n  {\n    const addr = this.addr.asInteger;\n    if (addr === undefined) return;\n    if (addr >= this.length || addr < 0)\n    {\n      throw new ComponentUsageError('There is no memory cell at address ' + addr);\n    }\n    let usage: CellUse = 'none';\n    if (this.memw.asBoolean === false && this.memr.asBoolean === true)\n    {\n      usage = 'read';\n    }\n    else if (this.memw.asBoolean === true && this.memr.asBoolean === false)\n    {\n      usage = 'write';\n      this.#cells[addr].value = this.din.value;\n    }\n    if (usage === 'read' && this.dout.value === undefined)\n    {\n      usage = 'error';\n    }\n    else\n    {\n      if (this.highlight_instr.asBoolean === true) usage = 'instruction';\n      if (this.highlight_jumpt.asBoolean === true) usage = 'jump_target';\n      if (this.highlight_addr.asBoolean === true) usage = 'address';\n    }\n    this.#cells[addr].lastUse = usage;\n    if (usage === 'error')\n    {\n      throw new ComponentUsageError('Cannot read from uninitialized memory at address ' + addr);\n    }\n  }\n\n  public clearHighlights()\n  {\n    for (const cell of this.#cells)\n    {\n      cell.lastUse = 'none';\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<MainMemoryView key={k} c={this} d={d} />)\n  }\n}\n\nclass MainMemoryView extends React.Component<{ c: MainMemory, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    return (\n      <g transform={xfrm} className=\"component\">\n        <rect x={0} y={0} width={30} height={500} />\n        <text className=\"label\" x={10} y={250} textAnchor=\"middle\" transform=\"rotate(90, 10, 250)\">Main Memory</text>\n      </g>);\n  }\n};\n","import React from 'react';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Mux extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in0 = new Input('in0', 0, 10);\n  public in1 = new Input('in1', 0, 40);\n  public sel = new Input('sel', 10, 45);\n  public out = new Output('out', 20, 25);\n  public readonly inNBits: number;\n  public readonly outNBits: number;\n  public readonly extend: boolean;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Mux\", id, x, y);\n    this.inNBits = params.inNBits;\n    this.outNBits = params.outNBits;\n    this.extend = params.extend === true;\n  }\n\n  public eval()\n  {\n    const sel = this.sel.asBoolean;\n    if (sel === undefined)\n    {\n      this.out.clear();\n      return;\n    }\n    if (sel)\n    {\n      this.out.value = this.in1.value;\n      this.in1.used = this.out.used;\n      this.sel.used = true;\n    }\n    else\n    {\n      this.out.value = this.in0.value;\n      this.in0.used = this.out.used;\n    }\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<MuxView key={k} c={this} d={d} />)\n  }\n}\n\nclass MuxView extends React.Component<{ c: Mux, d: Datapath }>\n{\n  render()\n  {\n    const { x, y } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    return (\n      <g transform={xfrm} className=\"component\">\n        <text key={1} x={3} y={20} className=\"label\">0</text>\n        <text key={2} x={3} y={42} className=\"label\">1</text>\n        <line key={3} x1={0} y1={0} x2={0} y2={50} />\n        <line key={4} x1={0} y1={0} x2={20} y2={10} />\n        <line key={5} x1={0} y1={50} x2={20} y2={40} />\n        <line key={6} x1={20} y1={10} x2={20} y2={40} />\n      </g>);\n  }\n};\n","import React from 'react';\nimport { Input, LogicComponent } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Probe extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in = new Input('in', 0, 10);\n  public readonly width: number;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Probe\", id, x, y);\n    this.width = params.wid || 70;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<ProbeView key={k} c={this} d={d} />)\n  }\n}\n\nclass ProbeView extends React.Component<{ c: Probe, d: Datapath }>\n{\n  render()\n  {\n    const { x, y, in: input, width } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    const value = input.value || '?';\n    return (\n      <g transform={xfrm} className=\"component\">\n        <text key={1} className=\"label\" x={15} y={15}>{value}</text>\n        <line key={3} x1={10} y1={0} x2={width} y2={0} />\n        <line key={4} x1={10} y1={20} x2={width} y2={20} />\n        <line key={5} x1={width} y1={0} x2={width} y2={20} />\n        <line key={6} x1={0} y1={10} x2={10} y2={0} />\n        <line key={7} x1={0} y1={10} x2={10} y2={20} />\n      </g>);\n  }\n};\n","import React from 'react';\nimport { Input, LogicComponent, Output } from \"./component\";\nimport { Datapath } from './datapath';\n\nexport class Tristate extends LogicComponent\n{\n  // The names of the fields need to match the names given to the constructor.\n  public in: Input;\n  public enable = new Input('enable', 15, 30);\n  public out: Output;\n  public readonly flip: boolean;\n\n  constructor(d: Datapath, id: string, x: number, y: number, params: any)\n  {\n    super(d, \"Tristate\", id, x, y);\n    let f = params.flip === true;\n    this.flip = f;\n    this.in = new Input('in', f ? 30 : 0, 20);\n    this.out = new Output('out', f ? 0 : 30, 20);\n  }\n\n  public eval()\n  {\n    if (this.enable.asBoolean === true)\n    {\n      this.enable.used = true;\n      let value = this.in.value;\n      if (value !== undefined)\n      {\n        this.out.value = value;\n        this.in.used = this.out.used;\n        return;\n      }\n    }\n    this.out.clear();\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<TristateView key={k} c={this} d={d} />)\n  }\n}\n\nclass TristateView extends React.Component<{ c: Tristate, d: Datapath }>\n{\n  render()\n  {\n    const { x, y, flip } = this.props.c;\n    const xfrm = 'translate(' + x + ',' + y + ')';\n    const x0 = flip ? 30 : 0;\n    const x1 = 30 - x0;\n    return (\n      <g transform={xfrm} className=\"component\">\n        <line key={3} x1={x0} y1={0} x2={x0} y2={40} />\n        <line key={4} x1={x0} y1={0} x2={x1} y2={20} />\n        <line key={5} x1={x0} y1={40} x2={x1} y2={20} />\n      </g>);\n  }\n};\n","// Utility for performing pathfinding with Djikstra's algorithm.\n\nclass Node\n{\n  public connections: Array<number> = [];\n  public distance: number = 0;\n}\n\nexport class Pathfinder\n{\n  nodes: Array<Node> = [];\n\n  constructor(numNodes: number)\n  {\n    for (let i = 0; i < numNodes; i++)\n    {\n      this.nodes.push(new Node());\n    }\n  }\n\n  public addBidirectionalConnection(node0: number, node1: number)\n  {\n    if (node0 === node1) return;\n    if (!this.nodes[node0].connections.includes(node1))\n      this.nodes[node0].connections.push(node1);\n    if (!this.nodes[node1].connections.includes(node0))\n      this.nodes[node1].connections.push(node0);\n  }\n\n  private propogateDistance(nodeIndex: number)\n  {\n    const thisDistance = this.nodes[nodeIndex].distance;\n    let next: Array<number> = [];\n    for (const connection of this.nodes[nodeIndex].connections)\n    {\n      const node = this.nodes[connection];\n      if (node.distance > thisDistance + 1)\n      {\n        node.distance = thisDistance + 1;\n        next.push(connection);\n      }\n    }\n    for (const nodeIndex of next)\n    {\n      this.propogateDistance(nodeIndex);\n    }\n  }\n\n  public setTarget(targetNode: number)\n  {\n    for (const node of this.nodes)\n    {\n      node.distance = 9e9;\n    }\n    this.nodes[targetNode].distance = 0;\n    this.propogateDistance(targetNode);\n  }\n\n  // Must call setTarget() before calling this to specify where the algorithm\n  // should try and get to from the provided starting point.\n  public findRoute(startFrom: number): Array<number>\n  {\n    let route = [startFrom];\n    let currentNode = this.nodes[startFrom];\n    while (currentNode.distance > 0)\n    {\n      if (currentNode.distance >= 9e9)\n      {\n        throw new Error('There is no path from the selected node to the target.');\n      }\n      for (const connection of currentNode.connections)\n      {\n        const connectedNode = this.nodes[connection];\n        if (connectedNode.distance < currentNode.distance)\n        {\n          route.push(connection);\n          currentNode = connectedNode;\n          break;\n        }\n      }\n    }\n    return route;\n  }\n}","import React from 'react';\nimport { Pathfinder } from '../utils/djikstra';\nimport { Input, Output } from './component';\nimport { Bus, BusException } from './connections';\nimport { Datapath } from './datapath';\n\nexport class Wire\n{\n  segments: Array<WireSegment>;\n  segmentPathfind: Pathfinder;\n\n  // Ins and outs arrays are for debugging only.\n  constructor(public readonly bus: Bus, pathDescription: string, ins: Array<string>, outs: Array<string>)\n  {\n    const builder = new SegmentsBuilder(bus, ins, outs);\n    builder.parse(pathDescription);\n    this.segments = builder.segments;\n    this.segmentPathfind = new Pathfinder(this.segments.length);\n    // Make connections between all lines that share end points.\n    for (let source = 0; source < this.segments.length; source++)\n    {\n      const sl = this.segments[source];\n      for (let target = 0; target < this.segments.length; target++)\n      {\n        const tl = this.segments[target];\n        const touching = (sl.x1 === tl.x1 && sl.y1 === tl.y1)\n          || (sl.x1 === tl.x2 && sl.y1 === tl.y2)\n          || (sl.x2 === tl.x1 && sl.y2 === tl.y1)\n          || (sl.x2 === tl.x2 && sl.y2 === tl.y2);\n        if (touching)\n        {\n          this.segmentPathfind.addBidirectionalConnection(source, target);\n        }\n      }\n    }\n  }\n\n  public segmentIndexConnectedAt(connection: Input | Output): number\n  {\n    let px = connection.x, py = connection.y;\n    // Add the coordinate of the parent component to the coordinate of the connection.\n    for (const ip of this.bus.connectedInputPins)\n    {\n      if (connection === ip.p)\n      {\n        px += ip.c.x;\n        py += ip.c.y;\n        break;\n      }\n    }\n    for (const op of this.bus.connectedOutputPins)\n    {\n      if (connection === op.p)\n      {\n        px += op.c.x;\n        py += op.c.y;\n        break;\n      }\n    }\n    // Find a segment which has a point attached to the connection.\n    const index = this.segments.findIndex(segment =>\n    {\n      return (segment.x1 === px && segment.y1 === py)\n        || (segment.x2 === px && segment.y2 === py);\n    });\n    if (index === -1)\n    {\n      console.log(px, py, this.segments);\n      throw new Error('Wire is not properly connected to component at ' + connection.name);\n    }\n    return index;\n  }\n\n  public render(k: string, d: Datapath)\n  {\n    return (<WireView key={k} c={this} d={d} />)\n  }\n}\n\nclass WireSegment\n{\n  constructor(\n    public readonly x1: number,\n    public readonly y1: number,\n    public readonly x2: number,\n    public readonly y2: number,\n  ) { }\n}\n\nclass SegmentsBuilder\n{\n  segments: Array<WireSegment> = [];\n\n  constructor(private bus: Bus, private ins: Array<string>, private outs: Array<string>) { }\n\n  private getInputPin(index: number): { x: number, y: number }\n  {\n    const result = this.bus.connectedOutputPins[index];\n    return {\n      x: result.c.x + result.p.x,\n      y: result.c.y + result.p.y\n    };\n  }\n\n  private getOutputPin(index: number): { x: number, y: number }\n  {\n    const result = this.bus.connectedInputPins[index];\n    return {\n      x: result.c.x + result.p.x,\n      y: result.c.y + result.p.y\n    };\n  }\n\n  private addSegment(x1: number, y1: number, x2: number, y2: number)\n  {\n    this.segments.push(new WireSegment(x1, y1, x2, y2));\n  }\n\n  private wireDescription(): string\n  {\n    return 'Wire from ' + this.ins.join(', ') + ' to ' + this.outs.join(', ');\n  }\n\n  private outputToInput(path: string)\n  {\n    const { x: x1, y: y1 } = this.getInputPin(0);\n    const { x: x2, y: y2 } = this.getOutputPin(0);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    switch (path)\n    {\n      case 'H':\n        if (y1 !== y2)\n        {\n          throw new Error(\n            `Emulator error: for wire, the connectors do not line up (${y1} vs ${y2}).`\n            + `\\nIn ${this.wireDescription()}`\n          );\n        }\n        this.addSegment(x1, y1, x2, y2);\n        break;\n      case 'V':\n        if (x1 !== x2)\n        {\n          throw new Error(\n            `Emulator error: for wire, the connectors do not line up (${x1} vs ${x2}).`\n            + `\\nIn ${this.wireDescription()}`\n          );\n        }\n        this.addSegment(x1, y1, x2, y2);\n        break;\n      case 'HV':\n        this.addSegment(x1, y1, x2, y1);\n        this.addSegment(x2, y1, x2, y2);\n        break;\n      case 'VH':\n        this.addSegment(x1, y1, x1, y2);\n        this.addSegment(x1, y2, x2, y2);\n        break;\n      case 'HVH':\n        this.addSegment(x1, y1, cx, y1);\n        this.addSegment(cx, y1, cx, y2);\n        this.addSegment(cx, y2, x2, y2);\n        break;\n      case 'VHV':\n        this.addSegment(x1, y1, x1, cy);\n        this.addSegment(x1, cy, x2, cy);\n        this.addSegment(x2, cy, x2, y2);\n        break;\n      default:\n        break;\n    }\n  }\n\n  parse(description: string)\n  {\n    const arr = description.split(' ');\n    let x1: number = 0, y1: number = 0, x2: number = 0, y2: number = 0;\n    let mode = 0;\n    let idx;\n    let stk = [];\n    for (let i = 0; i < arr.length; i++)\n    {\n      let op = arr[i];\n      if (op === 'H' || op === 'V' || op === 'HV' || op === 'VH' || op === 'HVH' || op === 'VHV')\n      {\n        // A normal single-wire connection.\n        this.outputToInput(op);\n        return;\n      }\n\n      // Move from p2 to p1\n      x1 = x2;\n      y1 = y2;\n\n      let t, v;\n\n      switch (op)\n      {\n        case 'i':\n          // This should be followed by a number which is the input number,\n          // followed by 'x', 'y', or 'xy'.\n          idx = parseInt(arr[i + 1]);\n          switch (arr[i + 2])\n          {\n            case 'x':\n              x2 = this.getInputPin(idx).x;\n              break;\n            case 'y':\n              y2 = this.getInputPin(idx).y;\n              break;\n            case 'xy':\n              x2 = this.getInputPin(idx).x;\n              y2 = this.getInputPin(idx).y;\n              break;\n            default:\n              break;\n          }\n          i += 2;\n          break;\n        case 'o':\n          // This should be followed by a number which is the output number,\n          // followed by 'x', 'y', or 'xy'.\n          idx = parseInt(arr[i + 1]);\n          switch (arr[i + 2])\n          {\n            case 'x':\n              x2 = this.getOutputPin(idx).x;\n              break;\n            case 'y':\n              y2 = this.getOutputPin(idx).y;\n              break;\n            case 'xy':\n              x2 = this.getOutputPin(idx).x;\n              y2 = this.getOutputPin(idx).y;\n              break;\n            default:\n              break;\n          }\n          i += 2;\n          break;\n        case 'l':\n          // This is move left (relative)\n          x2 -= parseInt(arr[i + 1]);\n          i++;\n          break;\n        case 'r':\n          // This is move right (relative)\n          x2 += parseInt(arr[i + 1]);\n          i++;\n          break;\n        case 'u':\n          // This is move down (relative)\n          y2 -= parseInt(arr[i + 1]);\n          i++;\n          break;\n        case 'd':\n          // This is move up (relative)\n          y2 += parseInt(arr[i + 1]);\n          i++;\n          break;\n        case '^':\n          t = parseInt(arr[i + 1]);\n          switch (arr[i + 2])\n          {\n            case 'x':\n              stk[t] = { val: x2, isX: true };\n              break;\n            case 'y':\n              stk[t] = { val: y2, isX: false };\n              break;\n            case 'xy':\n              stk[t] = { val: x2, valy: y2 };\n              break;\n            default:\n              break;\n          }\n          i += 2;\n          continue;\n        case '$':\n          t = parseInt(arr[i + 1]);\n          v = stk[t];\n          if (v)\n          {\n            if (v.valy !== undefined)\n            {\n              x2 = v.val;\n              y2 = v.valy;\n            }\n            else if (v.isX)\n            {\n              x2 = v.val;\n            }\n            else\n            {\n              y2 = v.val;\n            }\n          }\n          i++;\n          break;\n        case 'X':\n          // Move to in X\n          x2 = parseInt(arr[i + 1]);\n          i++;\n          break;\n        case 'Y':\n          // Move to in Y\n          y2 = parseInt(arr[i + 1]);\n          i++;\n          break;\n        case ';':\n          // Start a new segment\n          x1 = 0;\n          y1 = 0;\n          x2 = 0;\n          y2 = 0;\n          mode = -1;\n          break;\n        default:\n          break;\n      }\n      if (mode === 1)\n      {\n        this.addSegment(x1, y1, x2, y2);\n        continue;\n      }\n      mode++;\n    }\n  }\n}\n\nclass WireView extends React.Component<{ c: Wire, d: Datapath }>\n{\n  render()\n  {\n    const c = this.props.c;\n    const bus = c.bus;\n    const busValue = bus.displayValue;\n    let className = 'active';\n    if (busValue === BusException.Inactive)\n    {\n      className = 'inactive';\n    }\n    else if (busValue === BusException.Conflict)\n    {\n      className = 'conflict';\n    }\n    else if (busValue === '0' || busValue === 'false')\n    {\n      className += ' low';\n    }\n    className += ' wire';\n\n    let segmentsAreUsed: Array<boolean> = new Array(c.segments.length).fill(false);\n    if (bus.used && bus.activeInput !== undefined)\n    {\n      const inputSegment = c.segmentIndexConnectedAt(bus.activeInput);\n      c.segmentPathfind.setTarget(inputSegment);\n      for (const output of bus.usedBy)\n      {\n        const startingPoint = c.segmentIndexConnectedAt(output);\n        const path = c.segmentPathfind.findRoute(startingPoint);\n        for (const step of path)\n        {\n          segmentsAreUsed[step] = true;\n        }\n      }\n    }\n\n    let segments = [], i = 0;\n    for (const seg of this.props.c.segments)\n    {\n      const className = segmentsAreUsed[i] ? 'used' : '';\n      segments.push(<line key={i} className={className} {...seg}></line>);\n      i++;\n    }\n    return (\n      <g className={className}>\n        {segments}\n      </g>);\n  }\n};\n","import React from 'react';\nimport { FlagCell, MemoryCell } from '../utils/memory_cells';\nimport { ALU } from './ALU';\nimport { ComponentUsageError, LogicComponent } from \"./component\";\nimport { Bus } from \"./connections\";\nimport { Control } from './control';\nimport { Decoder, UnparsedDecoderMicrocode } from './Decoder';\nimport { Expand } from './Expand';\nimport { FlagLogic } from './FlagLogic';\nimport { And, AndOr, Or } from './gates';\nimport { Incrementer } from './Incrementer';\nimport { Latch } from './Latch';\nimport { MainMemory } from './MainMemory';\nimport { Mux } from './Mux';\nimport { Probe } from './Probe';\nimport { Tristate } from './Tristate';\nimport { Wire } from './Wire';\n\nexport interface DatapathDef\n{\n  width?: number,\n  height?: number,\n  components: Array<any & {\n    type: string,\n    id: string,\n    x: number,\n    y: number,\n  }>,\n  wires: Array<{\n    inputs: Array<string>,\n    outputs: Array<string>,\n    path: string,\n  }>,\n  microcode?: UnparsedDecoderMicrocode,\n}\n\ntype ComponentMaker = (d: Datapath, id: string, x: number, y: number, params: Map<string, any>) => LogicComponent;\nconst componentTypes: Map<string, ComponentMaker> = new Map([\n  [\"ALU\", (d, i, x, y, p): LogicComponent => new ALU(d, i, x, y, p)],\n  [\"And\", (d, i, x, y, p): LogicComponent => new And(d, i, x, y, p)],\n  [\"AndOr\", (d, i, x, y, p): LogicComponent => new AndOr(d, i, x, y, p)],\n  [\"Control\", (d, i, x, y, p): LogicComponent => new Control(d, i, x, y, p)],\n  [\"Decoder\", (d, i, x, y, p): LogicComponent => new Decoder(d, i, x, y, p)],\n  [\"Expand\", (d, i, x, y, p): LogicComponent => new Expand(d, i, x, y, p)],\n  [\"FlagLogic\", (d, i, x, y, p): LogicComponent => new FlagLogic(d, i, x, y, p)],\n  [\"Incrementer\", (d, i, x, y, p): LogicComponent => new Incrementer(d, i, x, y, p)],\n  [\"Latch\", (d, i, x, y, p): LogicComponent => new Latch(d, i, x, y, p)],\n  [\"MainMemory\", (d, i, x, y, p): LogicComponent => new MainMemory(d, i, x, y, p)],\n  [\"Mux\", (d, i, x, y, p): LogicComponent => new Mux(d, i, x, y, p)],\n  [\"Or\", (d, i, x, y, p): LogicComponent => new Or(d, i, x, y, p)],\n  [\"Probe\", (d, i, x, y, p): LogicComponent => new Probe(d, i, x, y, p)],\n  [\"Tristate\", (d, i, x, y, p): LogicComponent => new Tristate(d, i, x, y, p)],\n]);\n\nexport class Datapath\n{\n  #components: Array<LogicComponent> = [];\n  #wires: Array<Wire> = [];\n  #buses: Array<Bus> = [];\n  changeListener: () => void = () => { };\n\n  public width: number = 800;\n  public height: number = 600;\n  public visibleFlags: Array<FlagCell> = [];\n  public visibleRegisters: Array<MemoryCell> = [];\n  public mainMemoryBlock: Array<MemoryCell> = [];\n  public controls: Array<Control> = [];\n  public decoder: Decoder | undefined = undefined;\n  public lastMessage = \"Processor initialized.\";\n  public lastMessageWasError: boolean = false;\n  public haltRequested: boolean = false;\n  // The decoder sets this to true whenever a clock() results in the decoder \n  // switching back to its initial state/cycle.\n  public decoderCycleFinished: boolean = false;\n\n  get components(): Array<LogicComponent>\n  {\n    return this.#components;\n  }\n\n  get wires(): Array<Wire>\n  {\n    return this.#wires;\n  }\n\n  public loadDef(def: DatapathDef)\n  {\n    this.#components = [];\n    this.#wires = [];\n    this.#buses = [];\n    for (const cdef of def.components) \n    {\n      let builder = componentTypes.get(cdef.type);\n      if (builder === undefined) \n      {\n        throw new Error(`Emulator error: '${cdef.type}' is not a valid component type.`);\n      }\n      let component = builder(this, cdef.id, cdef.x, cdef.y, cdef);\n      if (component instanceof Control)\n      {\n        this.controls.push(component);\n      }\n      this.#components.push(component);\n    }\n    const findComp = (id: string) => this.#components.find(i => i.id === id);\n    for (const wdef of def.wires)\n    {\n      let bus = new Bus();\n      for (const idef of wdef.inputs)\n      {\n        let [cid, pin] = idef.split('.');\n        let comp = findComp(cid);\n        if (comp === undefined)\n        {\n          throw new Error(`Emulator error: could not find a gate with id '${cid}'.`);\n        }\n        comp.connectOutput(pin, bus);\n      }\n      for (const odef of wdef.outputs)\n      {\n        let [cid, pin] = odef.split('.');\n        let comp = findComp(cid);\n        if (comp === undefined)\n        {\n          throw new Error(`Emulator error: could not find a gate with id '${cid}'.`);\n        }\n        comp.connectInput(pin, bus);\n      }\n      let wire = new Wire(bus, wdef.path, wdef.inputs, wdef.outputs);\n      this.#buses.push(bus);\n      this.#wires.push(wire);\n    }\n    if (def.width)\n    {\n      this.width = def.width;\n    }\n    if (def.height)\n    {\n      this.height = def.height;\n    }\n    if (def.microcode)\n    {\n      this.decoder?.loadMicrocode(def.microcode);\n    }\n    this.reset();\n  }\n\n  public set decoderEnabled(value: boolean)\n  {\n    if (this.decoder !== undefined)\n    {\n      this.decoder.enabled = value;\n    }\n  }\n\n  public get decoderEnabled(): boolean\n  {\n    return this.decoder?.enabled || false;\n  }\n\n  public addComponent(component: LogicComponent)\n  {\n    this.#components.push(component);\n  }\n\n  public addBus(bus: Bus)\n  {\n    this.#buses.push(bus);\n  }\n\n  public addWire(wire: Wire)\n  {\n    this.#wires.push(wire);\n  }\n\n  // Resets all components, propogating changes.\n  public reset()\n  {\n    this.clearHighlights();\n    for (let c of this.#components)\n    {\n      c.reset();\n    }\n    this.lastMessage = 'Processor reset.';\n    this.lastMessageWasError = false;\n    this.eval();\n  }\n\n  // Evaluates all components, propogating any changes made by the user or\n  // the program.\n  public eval()\n  {\n    let error: string | undefined = undefined;\n    let exception: Error | undefined = undefined;\n    // This is a hacky way to make sure changes propogate through the whole circuit.\n    const doWork = (iters: number) =>\n    {\n      for (let i = 0; i < iters; i++)\n      {\n        for (let c of this.#components)\n        {\n          try\n          {\n            c.eval();\n          }\n          catch (e)\n          {\n            if (e instanceof ComponentUsageError)\n            {\n              if (error === undefined)\n              {\n                error = e.message;\n              }\n            }\n            else if (exception === undefined)\n            {\n              error = 'Emulator error: encountered JavaScript exception, see console for details.';\n              exception = e;\n            }\n          }\n        }\n      }\n    };\n    doWork(5);\n    for (const b of this.#buses)\n    {\n      b.clearUsedBy();\n    }\n    doWork(10);\n    if (error !== undefined)\n    {\n      this.lastMessage = error;\n      this.lastMessageWasError = true;\n    }\n    this.changeListener();\n    if (exception !== undefined)\n    {\n      throw exception;\n    }\n  }\n\n  // Clears highlights showing things like the last usage of a particular\n  // register. This can be called at different times to allow for both showing\n  // register usages during individual steps in the datapath and cumulatively\n  // for an entire instruction in the programmer view.\n  public clearHighlights()\n  {\n    for (const c of this.components)\n    {\n      c.clearHighlights()\n    }\n  }\n\n  // Does a clock signal without doing eval before or after.\n  public clock()\n  {\n    let error: string | undefined = undefined;\n    let exception: Error | undefined = undefined;\n    this.decoderCycleFinished = false;\n    this.haltRequested = false;\n    for (let c of this.#components)\n    {\n      try\n      {\n        c.evalClock();\n      }\n      catch (e)\n      {\n        if (e instanceof ComponentUsageError)\n        {\n          if (error === undefined)\n          {\n            error = e.message;\n          }\n        }\n        else if (exception === undefined)\n        {\n          error = 'Emulator error: encountered JavaScript exception, see console for details.';\n          exception = e;\n        }\n      }\n    }\n    if (error !== undefined)\n    {\n      this.lastMessage = error;\n      this.lastMessageWasError = true;\n      this.changeListener();\n    }\n    if (exception !== undefined)\n    {\n      throw exception;\n    }\n  }\n}\n\nexport class DatapathView extends React.Component<{ datapath: Datapath, className: string }>\n{\n  render()\n  {\n    let key = 0;\n    let children: Array<JSX.Element> = [];\n    for (const c of this.props.datapath.components)\n    {\n      children.push(c.render(c.id + key, this.props.datapath));\n      key += 1;\n    }\n    for (const w of this.props.datapath.wires)\n    {\n      children.push(w.render('wire' + key, this.props.datapath));\n      key += 1;\n    }\n    let { width, height } = this.props.datapath;\n\n    return (<svg className={\"datapath \" + this.props.className} viewBox={`0 0 ${width} ${height}`}>\n      {children}\n    </svg>);\n  }\n}\n","// This is the layout users should see if they don't want to look at the whole\n// datapath and just want to prorgram the processor.\n\nimport React from 'react';\nimport style from './DatapathLayout.module.css';\nimport { Datapath, DatapathView } from '../logic/datapath';\n\ntype Props = {\n  datapath: Datapath\n};\n\ntype State = {}\n\nexport default class DatapathLayout extends React.Component<Props, State> {\n  render()\n  {\n    const datapath = this.props.datapath;\n    return (\n      <DatapathView className={style.datapathView} datapath={datapath} />\n    )\n  }\n}","// Displays a value in memory or in a register.\n\nimport React from 'react';\nimport { MemoryCell } from '../utils/memory_cells';\nimport style from './MemoryCellView.module.css';\n\ntype Props = {\n  cell: MemoryCell,\n  onClick: () => void,\n  focused: boolean,\n}\n\nexport default class MemoryCellView extends React.Component<Props> {\n  render()\n  {\n    const cssc = this.props.cell.lastUseCssClass;\n    const v = this.props.cell.value;\n    const text = v === undefined ? '?' : v;\n    return (\n      <div\n        onClick={_e => this.props.onClick()}\n        className={\n          style.root\n          + (this.props.focused ? ' ' + style.focused : '')\n          + ' ' + cssc\n        }\n      >\n        {text}\n      </div>\n    )\n  }\n}","// Displays all 128 bytes of memory in a big grid.\n\nimport React from 'react';\nimport MemoryCellView from './MemoryCellView';\nimport style from './MemoryGrid.module.css';\nimport { MemoryCell } from '../utils/memory_cells';\n\ntype Props = {\n  memoryBlock: Array<MemoryCell>,\n  onClick: (index: number) => void,\n  focusedIndex: number | undefined,\n}\n\nexport default class MemoryGrid extends React.Component<Props> {\n  render()\n  {\n    const makeRegisterCell = (index: number) =>\n    {\n      return (\n        <MemoryCellView\n          key={`item${index}`}\n          cell={this.props.memoryBlock[index]}\n          onClick={() => this.props.onClick(index)}\n          focused={index === this.props.focusedIndex}\n        />\n      )\n    };\n    // CSS grid adds items from left to right, but logically they are ordered\n    // top to bottom. \n    let children = [];\n    const columnSize = Math.ceil(this.props.memoryBlock.length / 4);\n    for (let row = 0; row < columnSize; row++)\n    {\n      children.push((<span key={`label${row}`} className={style.label}>{row}</span>));\n      children.push(makeRegisterCell(row + columnSize * 0));\n      children.push(makeRegisterCell(row + columnSize * 1));\n      children.push(makeRegisterCell(row + columnSize * 2));\n      children.push(makeRegisterCell(row + columnSize * 3));\n    }\n    return (\n      <div className={style.root}>\n        {children}\n      </div>\n    )\n  }\n}","// Displays a flag\n\nimport React from 'react';\nimport { FlagCell } from '../utils/memory_cells';\nimport style from './FlagCellView.module.css';\n\nexport default class FlagCellView extends React.Component<{ flag: FlagCell }> {\n  render()\n  {\n    let text;\n    const v = this.props.flag.value;\n    if (v === true)\n    {\n      text = 'T';\n    }\n    else if (v === false)\n    {\n      text = 'F';\n    }\n    else\n    {\n      text = '?'\n    }\n    return (\n      <div className={style.root}>{text}</div>\n    )\n  }\n}","// This is the layout users should see if they don't want to look at the whole\n// datapath and just want to prorgram the processor.\n\nimport React from 'react';\nimport MemoryGrid from './MemoryGrid';\nimport style from './ProgrammerLayout.module.css';\nimport MemoryCellView from './MemoryCellView';\nimport FlagCellView from './FlagCellView';\nimport { Datapath } from '../logic/datapath';\nimport { MemoryCell } from '../utils/memory_cells';\n\ntype Props = {\n  datapath: Datapath\n};\n\ntype State = {\n  editing: {\n    cell: MemoryCell,\n    memoryIndex: number | undefined,\n  }\n  focusCell: (cell: MemoryCell, memoryIndex: number | undefined) => void,\n}\n\nexport default class ProgrammerLayout extends React.Component<Props, State> {\n  textBoxRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  constructor(props: Props)\n  {\n    super(props);\n    this.state = {\n      editing: {\n        cell: props.datapath.mainMemoryBlock[0],\n        memoryIndex: 0,\n      },\n      focusCell: (cell: MemoryCell, memoryIndex: number | undefined) =>\n      {\n        this.setState(\n          state =>\n          {\n            state.editing.cell = cell;\n            state.editing.memoryIndex = memoryIndex;\n            return state;\n          },\n          () =>\n          {\n            this.selectTextBox();\n          }\n        )\n      }\n    }\n  }\n\n  selectTextBox()\n  {\n    this.textBoxRef.current?.focus();\n    this.textBoxRef.current?.select();\n  }\n\n  shiftMemoryDown(at: number)\n  {\n    const mem = this.props.datapath.mainMemoryBlock;\n    for (let targetIndex = mem.length - 1; targetIndex > at; targetIndex--)\n    {\n      mem[targetIndex].value = mem[targetIndex - 1].value;\n    }\n    mem[at].value = undefined;\n    this.forceUpdate();\n  }\n\n  shiftMemoryUp(at: number)\n  {\n    const mem = this.props.datapath.mainMemoryBlock;\n    for (let targetIndex = at; targetIndex < mem.length - 1; targetIndex++)\n    {\n      mem[targetIndex].value = mem[targetIndex + 1].value;\n    }\n    mem[mem.length - 1].value = undefined;\n    this.forceUpdate();\n  }\n\n  render()\n  {\n    const datapath = this.props.datapath;\n    let editingLabel = this.state.editing.cell.label;\n    let isEditingMemory = this.state.editing.memoryIndex !== undefined;\n\n    const changeValue = (event: React.ChangeEvent<HTMLInputElement>) =>\n    {\n      let value = event.target.value.toUpperCase();\n      this.setState(\n        state =>\n        {\n          if (value === '?')\n            state.editing.cell.value = undefined;\n          else\n            state.editing.cell.value = value;\n          this.props.datapath.eval();\n          return state;\n        }\n      );\n    };\n\n    // Moves to the next memory cell if possible.\n    const advanceEditor = () =>\n    {\n      this.setState(\n        state =>\n        {\n          if (state.editing.memoryIndex === undefined) return state;\n          if (state.editing.memoryIndex === 127) return state;\n          state.editing.memoryIndex += 1;\n          state.editing.cell = datapath.mainMemoryBlock[state.editing.memoryIndex];\n          return state;\n        },\n        () =>\n        {\n          // Do this after the state is set because updating the state will\n          // mess with the text box.\n          this.selectTextBox();\n        }\n      );\n    };\n\n    const inputKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) =>\n    {\n      if (event.key === 'Enter')\n      {\n        advanceEditor();\n      }\n    }\n\n    let sidebarItems = [];\n    for (const reg of datapath.visibleRegisters)\n    {\n      sidebarItems.push((\n        <div key={reg.label + '_label'} className={style.label}>{reg.label}</div>\n      ));\n      sidebarItems.push((\n        <MemoryCellView\n          key={reg.label + '_value'}\n          cell={reg}\n          onClick={() => this.state.focusCell(reg, undefined)}\n          focused={reg === this.state.editing.cell}\n        />\n      ));\n    }\n    for (const flag of datapath.visibleFlags)\n    {\n      sidebarItems.push((\n        <div key={flag.label + '_label'} className={style.label}>{flag.label}</div>\n      ));\n      sidebarItems.push((\n        <FlagCellView key={flag.label + '_value'} flag={flag} />\n      ));\n    }\n\n    const value = this.state.editing.cell.value;\n    const fval = value === undefined ? '?' : value;\n\n    return (\n      <div className={style.processor}>\n        <div className={style.left_controls}>\n          {sidebarItems}\n\n          <div />\n          <div style={{ height: '2em' }} />\n\n          <div className={style.label}>Selected:</div>\n          <div>{editingLabel}</div>\n          <div className={style.label}>Value:</div>\n          <input\n            ref={this.textBoxRef}\n            value={fval}\n            onChange={changeValue}\n            onKeyUp={inputKeyUp}\n          />\n\n          <div />\n          <button\n            className=\"flat-button\"\n            onClick={() => this.shiftMemoryUp(this.state.editing.memoryIndex || 0)}\n            disabled={!isEditingMemory}\n          >Shift Up</button>\n          <div />\n          <button\n            className=\"flat-button\"\n            onClick={() => this.shiftMemoryDown(this.state.editing.memoryIndex || 0)}\n            disabled={!isEditingMemory}\n          >Shift Down</button>\n\n          <div />\n          <div style={{ height: '2em' }} />\n\n          <div />\n          <div className={style.key}>\n            <span className=\"use_read\">Read</span>\n            <span className=\"use_write\">Written</span>\n            <br />\n            <span className=\"use_instruction\">Instruction</span>\n            <span className=\"use_jump_target\">Jump Target</span>\n            <br />\n            <span className=\"use_address\">Used As Address</span>\n            <span className=\"use_error\">Error</span>\n          </div>\n        </div>\n        <MemoryGrid\n          memoryBlock={datapath.mainMemoryBlock}\n          onClick={index => this.state.focusCell(datapath.mainMemoryBlock[index], index)}\n          focusedIndex={this.state.editing.memoryIndex}\n        />\n      </div>\n    )\n  }\n}","import { MemoryCell } from \"./memory_cells\";\n\n\nfunction saveMem(mem: Array<MemoryCell>): string\n{\n  let data = '';\n  let lastItemWasInitialized = true;\n  for (let index = 0; index < mem.length; index++)\n  {\n    let item = mem[index];\n    if (item.value !== undefined)\n    {\n      if (lastItemWasInitialized)\n      {\n        data += ',';\n      }\n      else\n      {\n        data += index + ',';\n      }\n      data += item.value + '\\n';\n    }\n    lastItemWasInitialized = item.value !== undefined;\n  }\n  return data;\n}\n\nfunction trimQuotes(text: string): string\n{\n  if (text.startsWith('\"') && text.endsWith('\"'))\n  {\n    return text.substr(1, text.length - 2);\n  } else\n  {\n    return text;\n  }\n}\n\n// Returns an error message if the file is poorly formatted.\nfunction loadMem(mem: Array<MemoryCell>, file: string): string | null\n{\n  for (const cell of mem)\n  {\n    cell.value = undefined;\n  }\n\n  const READING_NUMBER = 1;\n  const READING_DATA = 2;\n\n  let numberText = '';\n  let data = '';\n  let currentIndex = 0;\n  let state = READING_NUMBER;\n\n  // This just makes the file easier to parse if we can assume that there is a\n  // newline after every entry.\n  file += '\\n';\n\n  for (let char of file)\n  {\n    // Pretend that LF is the only newline character.\n    if (char === '\\r') continue;\n    if (state === READING_NUMBER)\n    {\n      if (char === ',')\n      {\n        // We are at the end of the number. \n        let trimmed = trimQuotes(numberText.trim());\n        state = READING_DATA;\n        data = '';\n        // If we read nothing, then just use what we currently think the index \n        // is and continue.\n        if (trimmed.length === 0) continue;\n\n        currentIndex = parseInt(trimmed);\n        if (isNaN(currentIndex))\n        {\n          return numberText + ' is not a valid number';\n        }\n        if (currentIndex >= mem.length)\n        {\n          return currentIndex + ' is too big, it is over ' + (mem.length - 1);\n        }\n        if (currentIndex < 0)\n        {\n          return currentIndex + ' is too small, it is less than 0';\n        }\n      }\n      else\n      {\n        numberText += char\n      }\n    }\n    else if (state === READING_DATA)\n    {\n      if (char === '\\n')\n      {\n        state = READING_NUMBER;\n        numberText = '';\n        // Just silently discard the value. It is easier for the uset to see\n        // what went wrong if they see part of their code thrown away.\n        if (currentIndex >= mem.length) continue;\n        // Remove extra whitespace.\n        let trimmedData = trimQuotes(data.trim());\n        // If the data is blank, do not load data and do not increment the\n        // index. This allows putting a number and then the value contained in\n        // it on the next line.\n        if (trimmedData.length === 0) continue;\n        if (trimmedData !== '?')\n        {\n          mem[currentIndex].value = trimmedData.toUpperCase();\n        }\n        currentIndex += 1;\n      }\n      else\n      {\n        data += char;\n      }\n    }\n  }\n\n  return null;\n}\n\nconst csvio = {\n  saveMem,\n  loadMem,\n};\n\nexport default csvio;","import React from 'react';\nimport { Datapath } from '../logic/datapath';\nimport DatapathLayout from './DatapathLayout';\nimport ProgrammerLayout from './ProgrammerLayout';\nimport style from './Root.module.css';\nimport csvio from '../utils/csvio';\n\nexport default class Root extends React.Component<{ datapath: Datapath }, { datapathLayout: boolean, flashStepBtn: boolean }> {\n  // Is the clock running?\n  #running = false;\n  // Are we running fast or slow?\n  #fast = false;\n  // The timer used while running\n  #timer: number | undefined = undefined;\n\n  constructor(props: { datapath: Datapath })\n  {\n    super(props);\n    this.state = {\n      datapathLayout: false,\n      flashStepBtn: false,\n    }\n  }\n\n  componentDidMount()\n  {\n    this.props.datapath.changeListener = () => this.forceUpdate();\n  }\n\n  componentWillUnmount()\n  {\n    this.props.datapath.changeListener = () => { };\n  }\n\n  private loadFile(event: React.ChangeEvent<HTMLInputElement>)\n  {\n    this.reset();\n    const file = event.target.files?.item(0);\n    if (!file) return;\n    file.text().then((text: string) =>\n    {\n      const datapath = this.props.datapath;\n      const error = csvio.loadMem(datapath.mainMemoryBlock, text);\n      this.forceUpdate();\n      if (error)\n      {\n        alert('Error encountered while loading file:\\n' + error);\n      }\n      this.props.datapath.eval();\n    });\n  }\n\n  private saveFile()\n  {\n    const datapath = this.props.datapath;\n    const contents = csvio.saveMem(datapath.mainMemoryBlock);\n    const blob = new Blob([contents]);\n    const href = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = 'Memory.csv';\n    link.type = 'text/csv';\n    link.href = href;\n    link.click();\n    link.remove();\n    this.props.datapath.eval();\n  }\n\n  private toggleLayout()\n  {\n    this.setState(state => ({ datapathLayout: !state.datapathLayout }));\n  }\n\n  private startClock(fast: boolean)\n  {\n    this.#fast = fast;\n    if (this.#running === false)\n    {\n      this.#running = true;\n      this.timerTick();\n    }\n  }\n\n  // Stop the current 'run' of the processor\n  private stopClock()\n  {\n    if (this.#running)\n    {\n      clearTimeout(this.#timer);\n      this.#running = false;\n      this.setState(state => (\n        {\n          ...state,\n          flashStepBtn: false\n        }\n      ));\n    }\n  }\n\n  private timerTick()\n  {\n    clearTimeout(this.#timer);\n    this.#timer = undefined;\n    if (!this.state.flashStepBtn) this.doStep();\n    if (this.#running)\n    {\n      // Two of these intervals go by for every step, because we switch the \n      // button blink on every tick of the timer.\n      let speed = this.#fast ? 100 : 1000;\n      this.#timer = window.setTimeout(() => this.timerTick(), speed);\n      this.setState(state => (\n        {\n          ...state,\n          flashStepBtn: !state.flashStepBtn\n        }\n      ));\n    }\n  }\n\n  private doStep()\n  {\n    this.props.datapath.clearHighlights();\n    this.props.datapath.clock();\n    this.props.datapath.eval();\n    if (this.props.datapath.haltRequested)\n    {\n      this.stopClock();\n    }\n    const dp = this.props.datapath;\n    const datapathMode = this.state.datapathLayout;\n    // In programmer view, we should step through entire instructions at a time.\n    // In datapath view, we show the individual clock cycles that happen to \n    // make an instruction work.\n    if (!datapathMode)\n    {\n      let safetyCounter = 50;\n      while (!dp.decoderCycleFinished && safetyCounter > 0)\n      {\n        dp.clock();\n        dp.eval();\n        safetyCounter--;\n      }\n      if (safetyCounter === 0)\n      {\n        throw new Error('Decoder did not finish in 50 cycles, probably a programming error.');\n      }\n    }\n    if (dp.lastMessageWasError)\n    {\n      this.stopClock();\n    }\n    else if (dp.decoderCycleFinished)\n      {\n        dp.lastMessage = dp.decoder?.getInstructionDescription() || \"(No description provided for last instruction.)\";\n    }\n  }\n\n  private reset()\n  {\n    this.stopClock();\n    this.props.datapath.reset();\n  }\n\n  render()\n  {\n    const datapath = this.props.datapath;\n    const mainWidget = this.state.datapathLayout\n      ? (<DatapathLayout datapath={datapath} />)\n      : (<ProgrammerLayout datapath={datapath} />);\n    return (\n      <div className={style.root}>\n        {mainWidget}\n        <div className={datapath.lastMessageWasError ? style.error_message : style.info_message}>\n          {datapath.lastMessage}\n        </div>\n        <div className={style.actions}>\n          <button className={\"flat-button\" + (this.state.flashStepBtn ? ' pressed' : '')} onClick={() => this.doStep()}>\n            {this.state.datapathLayout ? 'Clock' : 'Step'}\n          </button>\n          <button className=\"flat-button\" onClick={() => this.startClock(false)}>Run</button>\n          <button className=\"flat-button\" onClick={() => this.startClock(true)}>Run Fast</button>\n          <button className=\"flat-button\" onClick={() => this.stopClock()}>Stop</button>\n          <button className=\"flat-button\" onClick={() => this.reset()}>Reset</button>\n          <button className=\"flat-button\" onClick={() => this.saveFile()}>Save Memory</button>\n          <label className=\"flat-button\" htmlFor=\"file\">Load Memory</label>\n          <input onChange={e => this.loadFile(e)} id=\"file\" type=\"file\" accept=\".csv\" className={style.semi_hidden} />\n          <button\n            className={'flat-button ' + style.switch_view_button}\n            onClick={() => this.toggleLayout()}>\n            Switch To {this.state.datapathLayout ? 'Programmer' : 'Datapath'} View\n          </button>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/utils/PDP8e.js - JSON structure for building the PDP8e Datapath\n\nimport { DatapathDef } from \"../logic/datapath\";\n\nconst x0 = 0;\nconst y0 = 0;\nconst x1 = x0 + 20;\nconst y1 = y0 + 100;\nconst x2 = x0 + 460;\nconst y2 = y0 + 80;\nconst x3 = x0 + 40;\nconst y3 = y0 + 260;\n\nexport const PICO: DatapathDef = {\n  width: 800,\n  height: 500,\n  components: [\n    {\n      type: 'Mux',\n      id: 'MIncSel',\n      x: x1 + 10,\n      y: y1 - 25\n    },\n    {\n      type: 'Control',\n      id: 'IncSel',\n      name: 'incsel',\n      x: x1 - 5,\n      y: y1 + 35,\n      wid: 50,\n      top: true,\n    },\n    {\n      type: 'Incrementer',\n      id: 'Plus1',\n      x: x1 + 70,\n      y: y1 - 15,\n      nbits: 7,\n      constant: 1\n    },\n    {\n      type: 'Expand',\n      id: 'ExPC',\n      x: x1 + 80,\n      y: y1 + 25,\n      inNBits: 12,\n      outNBits: 7,\n      extend: false\n    },\n    {\n      type: 'Mux',\n      id: 'MPC',\n      x: x1 + 140,\n      y: y1 - 10\n    },\n    {\n      type: 'Control',\n      id: 'PCSel',\n      name: 'psel',\n      x: x1 + 130,\n      y: y1 + 50,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Latch',\n      id: 'PC',\n      name: 'PC',\n      x: x1 + 250,\n      y: y1 + 5,\n      nbits: 7,\n      resetValue: 0,\n      visible: true,\n      signed: false,\n    },\n    {\n      type: 'AndOr',\n      id: 'LPC',\n      x: x1 + 200,\n      y: y1 + 95\n    },\n    {\n      type: 'Control',\n      id: 'FLdPC',\n      name: 'fldpc',\n      x: x1 + 130,\n      y: y1 + 75,\n      wid: 50,\n      top: false,\n    },\n    {\n      type: 'Control',\n      id: 'CLdPC',\n      name: 'cldpc',\n      x: x1 + 130,\n      y: y1 + 100,\n      wid: 50,\n      top: false,\n    },\n    {\n      type: 'Expand',\n      id: 'ExPCOut',\n      x: x1 + 310,\n      y: y1 + 45,\n      inNBits: 7,\n      outNBits: 12,\n      extend: false\n    },\n    {\n      type: 'Tristate',\n      id: 'PC2A',\n      x: x1 + 350,\n      y: y1 - 40,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdPCA',\n      name: 'rdpca',\n      x: x1 + 340,\n      y: y1 + 10,\n      wid: 50,\n      top: true,\n    },\n    {\n      type: 'Tristate',\n      id: 'PC2B',\n      x: x1 + 350,\n      y: y1 + 50,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdPCB',\n      name: 'rdpcb',\n      x: x1 + 340,\n      y: y1 + 100,\n      wid: 50,\n      top: true,\n    },\n\n    // We insert this here so that it is displayed before Q and IR in the\n    // programmer view.\n    {\n      type: 'Latch',\n      id: 'ACC',\n      name: 'ACC',\n      x: x3 + 140,\n      y: y3 + 80,\n      nbits: 12,\n      visible: true,\n    },\n\n    // TA and IR unit\n    {\n      type: 'Expand',\n      id: 'ExS',\n      x: x2 + 10,\n      y: y2 - 25,\n      inNBits: 12,\n      outNBits: 7,\n      extend: false\n    },\n    {\n      type: 'Latch',\n      id: 'S',\n      name: 'S',\n      x: x2 + 70,\n      y: y2 - 10,\n      nbits: 7,\n      signed: false,\n    },\n    {\n      type: 'Control',\n      id: 'LdS',\n      name: 'lds',\n      x: x2 + 60,\n      y: y2 + 50,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Tristate',\n      id: 'S2A',\n      x: x2 + 130,\n      y: y2 - 20,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdS',\n      name: 'rds',\n      x: x2 + 125,\n      y: y2 + 50,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Latch',\n      id: 'IR',\n      name: 'IR',\n      x: x2 + 10,\n      y: y2 + 100,\n      visible: true,\n    },\n    {\n      type: 'Control',\n      id: 'LdIR',\n      name: 'ldir',\n      x: x2,\n      y: y2 + 160,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Expand',\n      id: 'ExIR',\n      x: x2 + 80,\n      y: y2 + 85,\n      inNBits: 12,\n      outNBits: 7,\n      extend: false\n    },\n    {\n      type: 'Decoder',\n      id: 'Dec',\n      x: x2 + 80,\n      y: y2 + 145\n    },\n    {\n      type: 'Tristate',\n      id: 'IR2A',\n      x: x2 + 150,\n      y: y2 + 90,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdIR',\n      name: 'rdir',\n      x: x2 + 145,\n      y: y2 + 145,\n      wid: 40,\n      top: true,\n    },\n\n    // Arithmetic section\n    {\n      type: 'Latch',\n      id: 'Q',\n      name: 'Q',\n      x: x3 + 10,\n      y: y3 + 95,\n      nbits: 12,\n      visible: true,\n    },\n    {\n      type: 'Control',\n      id: 'LdQ',\n      name: 'ldq',\n      x: x3,\n      y: y3 + 155,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Mux',\n      id: 'MAcc',\n      x: x3 + 80,\n      y: y3 + 65\n    },\n    {\n      type: 'Control',\n      id: 'ASel',\n      name: 'asel',\n      x: x3 + 70,\n      y: y3 + 125,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Control',\n      id: 'LdA',\n      name: 'lda',\n      x: x3 + 130,\n      y: y3 + 140,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'ALU',\n      id: 'ALU',\n      x: x3 + 210,\n      y: y3 + 75,\n      nbits: 12\n    },\n    {\n      type: 'FlagLogic',\n      id: 'Flags',\n      x: x3 + 200,\n      y: y3 + 25\n    },\n    {\n      type: 'Control',\n      id: 'AOp',\n      name: 'op',\n      x: x3 + 200,\n      y: y3 + 175,\n      wid: 60,\n      top: true,\n      options: ['ADD', 'AND', 'INC', 'INCB', 'DEC', 'DECB', 'CMA', 'NEG', 'RAL', 'RAR', 'ZERO', 'ONES']\n    },\n    {\n      type: 'Control',\n      id: 'FOp',\n      name: 'fop',\n      x: x3 + 120,\n      y: y3 + 30,\n      wid: 60,\n      top: false,\n      options: ['RDTZ', 'RDC', 'RDZ', 'RDN', 'RDV', 'RDNC', 'RDNZ', 'RDNN', 'RDNV', 'ROT', 'LDZ', 'LDALL', 'LDTZ', 'CLC', 'STC', 'CMC']\n    },\n    {\n      type: 'Tristate',\n      id: 'Acc2D',\n      x: x3 + 310,\n      y: y3 + 45,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdA',\n      name: 'rda',\n      x: x3 + 305,\n      y: y3 + 95,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Mux',\n      id: 'MT',\n      x: x3 + 310,\n      y: y3 + 135\n    },\n    {\n      type: 'Control',\n      id: 'TSel',\n      name: 'tsel',\n      x: x3 + 300,\n      y: y3 + 195,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Probe',\n      id: 'ViewALU',\n      x: x3 + 300,\n      y: y3 + 10,\n      wid: 80\n    },\n    {\n      type: 'Latch',\n      id: 'T',\n      name: 'T',\n      x: x3 + 360,\n      y: y3 + 135,\n      nbits: 12\n    },\n    {\n      type: 'Control',\n      id: 'LdT',\n      name: 'ldt',\n      x: x3 + 350,\n      y: y3 + 195,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Tristate',\n      id: 'T2D',\n      x: x3 + 420,\n      y: y3 + 125,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'RdT',\n      name: 'rdt',\n      x: x3 + 415,\n      y: y3 + 175,\n      wid: 40,\n      top: true,\n    },\n\n    // Memory section\n    {\n      type: 'Tristate',\n      id: 'ADrv',\n      x: x0 + 680,\n      y: y0 + 10,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'AOut',\n      name: 'aout',\n      x: x0 + 675,\n      y: y0 + 60,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Tristate',\n      id: 'DinDrv',\n      x: x3 + 420,\n      y: y3 + 40,\n      flip: true\n    },\n    {\n      type: 'Control',\n      id: 'Din',\n      name: 'din',\n      x: x3 + 415,\n      y: y3 + 85,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'Tristate',\n      id: 'DoutDrv',\n      x: x3 + 470,\n      y: y3 + 10,\n      flip: false\n    },\n    {\n      type: 'Control',\n      id: 'Dout',\n      name: 'dout',\n      x: x3 + 465,\n      y: y3 + 85,\n      wid: 40,\n      top: true,\n    },\n    {\n      type: 'MainMemory',\n      id: 'Mem',\n      x: x0 + 760,\n      y: y0,\n      databits: 12,\n      addrbits: 7,\n      addrY: 30,\n      memrY: 110,\n      memwY: 135,\n      dataY: y3 + 30\n    },\n    {\n      type: 'Control',\n      id: 'MemR',\n      name: 'memr',\n      x: x0 + 675,\n      y: y0 + 100,\n      wid: 60,\n      top: false,\n    },\n    {\n      type: 'Control',\n      id: 'MemW',\n      name: 'memw',\n      x: x0 + 675,\n      y: y0 + 125,\n      wid: 60,\n      top: false,\n    },\n    {\n      type: 'Control',\n      id: 'HltI',\n      name: 'hlti',\n      x: x0 + 675,\n      y: y0 + 390,\n      wid: 60,\n      top: false,\n    },\n    {\n      type: 'Control',\n      id: 'HltJ',\n      name: 'hltj',\n      x: x0 + 675,\n      y: y0 + 415,\n      wid: 60,\n      top: false,\n    },\n    {\n      type: 'Control',\n      id: 'HltA',\n      name: 'hlta',\n      x: x0 + 675,\n      y: y0 + 440,\n      wid: 60,\n      top: false,\n    },\n  ],\n  wires: [\n    { inputs: ['IncSel.out'], outputs: ['MIncSel.sel'], path: 'V' },\n    { inputs: ['MIncSel.out'], outputs: ['Plus1.in'], path: 'H' },\n    { inputs: ['PCSel.out'], outputs: ['MPC.sel'], path: 'V' },\n    { inputs: ['Plus1.out'], outputs: ['MPC.in0'], path: 'H' },\n    { inputs: ['ExPC.out'], outputs: ['MPC.in1'], path: 'HVH' },\n    { inputs: ['MPC.out'], outputs: ['PC.in'], path: 'H' },\n    { inputs: ['LPC.out'], outputs: ['PC.load'], path: 'HV' },\n    { inputs: ['FLdPC.out'], outputs: ['LPC.in0'], path: 'HVH' },\n    { inputs: ['CLdPC.out'], outputs: ['LPC.in1'], path: 'HVH' },\n    { inputs: ['RdPCA.out'], outputs: ['PC2A.enable'], path: 'V' },\n    { inputs: ['RdPCB.out'], outputs: ['PC2B.enable'], path: 'V' },\n    { inputs: ['ExPCOut.out'], outputs: ['PC2B.in'], path: 'H' },\n    {\n      inputs: ['PC.out'],\n      outputs: ['MIncSel.in0', 'PC2A.in', 'ExPCOut.in'],\n      path: 'o 0 xy l 10 u 30 r 300 o 1 y i 0 y o 2 y o 2 xy ; i 0 xy r 20 ; o 1 xy l 50'\n    },\n    { inputs: ['ExS.out'], outputs: ['S.in'], path: 'H' },\n    { inputs: ['LdS.out'], outputs: ['S.load'], path: 'V' },\n    { inputs: ['RdS.out'], outputs: ['S2A.enable'], path: 'V' },\n    { inputs: ['S.out'], outputs: ['S2A.in'], path: 'H' },\n    { inputs: ['LdIR.out'], outputs: ['IR.load'], path: 'V' },\n    { inputs: ['ExIR.out'], outputs: ['IR2A.in'], path: 'H' },\n    { inputs: ['RdIR.out'], outputs: ['IR2A.enable'], path: 'V' },\n    {\n      inputs: ['IR.out'],\n      outputs: ['ExIR.in', 'Dec.in'],\n      path: 'i 0 xy r 20 ^ 0 xy o 0 xy ; $ 0 o 1 y o 1 xy'\n    },\n    { inputs: ['LdQ.out'], outputs: ['Q.load'], path: 'V' },\n    { inputs: ['Q.out'], outputs: ['MAcc.in1'], path: 'H' },\n    { inputs: ['ASel.out'], outputs: ['MAcc.sel'], path: 'V' },\n    { inputs: ['LdA.out'], outputs: ['ACC.load'], path: 'V' },\n    { inputs: ['MAcc.out'], outputs: ['ACC.in'], path: 'H' },\n    { inputs: ['ALU.flags'], outputs: ['Flags.in'], path: 'HVH' },\n    { inputs: ['AOp.out'], outputs: ['ALU.op'], path: 'V' },\n    { inputs: ['FOp.out'], outputs: ['Flags.op'], path: 'H' },\n    {\n      inputs: ['Flags.out'],\n      outputs: ['ALU.cin', 'LPC.in2'],\n      path: 'i 0 xy u 10 ^ 0 xy r 40 d 150 o 0 x o 0 xy ; $ 0 o 1 x l 10 o 1 y o 1 xy'\n    },\n    { inputs: ['RdA.out'], outputs: ['Acc2D.enable'], path: 'V' },\n    {\n      inputs: ['ACC.out'],\n      outputs: ['ALU.in0', 'Acc2D.in'],\n      path: 'i 0 xy r 20 ^ 0 xy ^ 1 x o 0 xy ; o 1 xy $ 1 $ 0'\n    },\n    { inputs: ['TSel.out'], outputs: ['MT.sel'], path: 'V' },\n    {\n      inputs: ['ALU.out'],\n      outputs: ['MT.in1', 'MAcc.in0', 'ViewALU.in'],\n      path: 'o 1 xy l 20 u 70 r 220 ^ 0 x o 2 y i 0 y o 0 y o 0 xy ; i 0 xy $ 0 ; o 2 xy $ 0'\n    },\n    { inputs: ['LdT.out'], outputs: ['T.load'], path: 'V' },\n    { inputs: ['MT.out'], outputs: ['T.in'], path: 'HVH' },\n    { inputs: ['RdT.out'], outputs: ['T2D.enable'], path: 'V' },\n    {\n      inputs: ['T.out'],\n      outputs: ['T2D.in', 'ALU.in1'],\n      path: 'i 0 xy r 15 ^ 0 xy o 0 xy ; $ 0 d 80 l 215 o 1 y o 1 xy'\n    },\n    { inputs: ['AOut.out'], outputs: ['ADrv.enable'], path: 'V' },\n    {\n      inputs: ['PC2A.out', 'S2A.out', 'IR2A.out'],\n      outputs: ['ADrv.in', 'MIncSel.in1'],\n      path: 'i 0 xy r 20 o 0 y ^ 0 x ; i 2 xy r 20 i 1 y ^ 1 x ; i 1 xy $ 1 o 0 y ; o 1 xy l 20 o 0 y $ 0 $ 1 o 0 xy',\n      // label: 'abus',\n    },\n    { inputs: ['Din.out'], outputs: ['DinDrv.enable'], path: 'V' },\n    { inputs: ['Dout.out'], outputs: ['DoutDrv.enable'], path: 'V' },\n    {\n      inputs: ['Acc2D.out', 'PC2B.out', 'T2D.out', 'DinDrv.out'],\n      outputs: ['Q.in', 'ExPC.in', 'ExS.in', 'IR.in', 'MT.in0', 'DoutDrv.in'],\n      path: 'o 0 xy l 10 u 115 ^ 0 y ^ 2 xy ; o 1 xy l 20 $ 0 ^ 3 xy $ 2 ; o 4 xy l 20 $ 0 ^ 4 xy $ 3 ; o 3 xy l 30 ^ 1 x ^ 5 xy $ 0 ^ 6 xy $ 4 ; i 1 xy $ 1 ^ 7 xy $ 5 ; o 2 xy $ 1 $ 7 ; o 5 xy $ 1 ^ 8 xy $ 6 ; i 3 xy $ 1 ^ 9 xy $ 8 ; i 0 xy $ 1 ^ 10 xy $ 9 ; i 2 xy r 20 u 30 $ 1 $ 10',\n      // label: 'dbus',\n    },\n    { inputs: ['ADrv.out'], outputs: ['Mem.addr'], path: 'H' },\n    {\n      inputs: ['DoutDrv.out', 'Mem.dout'],\n      outputs: ['Mem.din', 'DinDrv.in'],\n      path: 'o 1 xy r 70 i 0 y ^ 0 x ; i 1 xy l 20 i 0 y ^ 1 x ; i 0 xy $ 0 $ 1 o 0 xy'\n    },\n    { inputs: ['MemR.out'], outputs: ['Mem.memr'], path: 'H' },\n    { inputs: ['MemW.out'], outputs: ['Mem.memw'], path: 'H' },\n    { inputs: ['HltI.out'], outputs: ['Mem.highlight_instr'], path: 'H' },\n    { inputs: ['HltJ.out'], outputs: ['Mem.highlight_jumpt'], path: 'H' },\n    { inputs: ['HltA.out'], outputs: ['Mem.highlight_addr'], path: 'H' },\n  ],\n  microcode: {\n    clockCycleNames: ['t0 (fetch)', 't1', 't2', 't3', 't4', 't5'],\n    fetchCycleStep: 'rdpca,aout,memr,din,ldir,hlti',\n    instructions: [\n      '<T> from MEM[<ExIR>] is ANDed to ACC.' +\n      ';AND;rdir,aout,memr,din,ldt;op:AND,fop:LDZ,lda;fldpc',\n      '<T> from MEM[<PC-1>] is ANDed to ACC.' +\n      ';ANDI;fldpc;rdpca,aout,memr,din,ldt;op:AND,fop:LDZ,lda;fldpc',\n      '<T> from MEM[<S>] is ANDed to ACC.' +\n      ';ANDR;rdir,aout,memr,hlta,din,lds;rds,aout,memr,din,ldt;op:AND,fop:LDZ,lda;fldpc',\n\n      '<T> from MEM[<ExIR>] is added to ACC.' +\n      ';TAD;rdir,aout,memr,din,ldt;op:ADD,fop:LDALL,lda;fldpc',\n      '<T> from MEM[<PC-1>] is added to ACC.' +\n      ';TADI;fldpc;rdpca,aout,memr,din,ldt;op:ADD,fop:LDALL,lda;fldpc',\n      '<T> from MEM[<S>] is added to ACC.' +\n      ';TADR;rdir,aout,memr,hlta,din,lds;rds,aout,memr,din,ldt;op:ADD,fop:LDALL,lda;fldpc',\n\n      'Incremented MEM[<ExIR>] to <T>, <Flags?skipped over:continued to> next instruction.' +\n      ';ISZ;fldpc,rdir,aout,memr,din,ldt;op:INCB,fop:LDZ,tsel,ldt;rdir,aout,memw,rdt,dout,cldpc,fop:RDZ,!message;rdpca,aout,hltj',\n      'Incremented MEM[<S>] to <T>, <Flags?skipped over:continued to> next instruction.' +\n      ';ISZR;fldpc,rdir,aout,memr,hlta,din,lds;rds,aout,memr,din,ldt;op:INCB,fop:LDZ,tsel,ldt;rds,aout,memw,rdt,dout,cldpc,fop:RDZ;rdpca,aout,hltj,!message',\n\n      'Wrote <ACC> to MEM[<ExIR>] and cleared ACC.' +\n      ';DCA;rdir,aout,memw,rda,dout,!message;op:ZERO,lda;fldpc',\n      'Wrote <ACC> to MEM[<S>] and cleared ACC.' +\n      ';DCAR;rdir,aout,memr,hlta,din,lds;rds,aout,memw,rda,dout,!message;op:ZERO,lda;fldpc',\n\n      'Jumped to subroutine at MEM[<ExIR+1>], placing return address at MEM[<ExIR>].' +\n      ';JMS;fldpc;rdir,aout,memw,rdpcb,dout;rdir,incsel,fldpc;rdpca,aout,hltj',\n      'Jumped to subroutine at MEM[<S+1>], placing return address at MEM[<S>].' +\n      ';JMSR;fldpc,rdir,aout,memr,hlta,din,lds;rds,aout,memw,rdpcb,dout;rds,incsel,fldpc,!message;rdpca,aout,hltj',\n      'Jumped to MEM[<PC>].' +\n      ';JMP;rdir,incsel,fldpc,aout,hltj;rdpcb,ldt;op:DECB,tsel,ldt,!message;rdt,psel,fldpc',\n      'Jumped to MEM[<PC>].' +\n      ';JMPR;rdir,aout,memr,hlta,din,psel,fldpc,!message;rdpca,aout,hltj',\n\n      'Did nothing.;NOP;fldpc',\n      'Incremented accumulator.;IAC;op:INC,fop:LDALL,lda;fldpc',\n      'Shifted accumulator left through carry.;RAL;op:RAL,fop:ROT,lda;fldpc',\n      'Shifted accumulator right through carry.;RAR;op:RAR,fop:ROT,lda;fldpc',\n      'Complemeted accumulator.;CMA;op:CMA,lda;fldpc',\n      'Negated accumulator.;CIA;op:NEG,lda;fldpc',\n      'Cleared accumulator;CLA;op:ZERO,lda;fldpc',\n      'Set accumulator.;STA;op:ONES,lda;fldpc',\n      'Cleared carry flag.;CLC;fop:CLC;fldpc',\n      'Set carry flag.;STC;fop:STC;fldpc',\n      'Complemented carry flag.;CMC;fop:CMC;fldpc',\n      'Skipped over the next instruction.;SKP;fldpc;fldpc',\n\n      '<Flags?Skipped over:Continued to> the next instruction because the carry flag was <Flags?not set:set>.' +\n      ';SCC;fop:RDNC,cldpc,!message;fldpc;rdpca,aout,hltj',\n      '<Flags?Skipped over:Continued to> the next instruction because the carry flag was <Flags?set:not set>.' +\n      ';SCS;fop:RDC,cldpc,!message;fldpc;rdpca,aout,hltj',\n      '<Flags?Skipped over:Continued to> the next instruction because the zero flag was <Flags?not set:set>.' +\n      ';SZC;fop:RDNZ,cldpc,!message;fldpc;rdpca,aout,hltj',\n      '<Flags?Skipped over:Continued to> the next instruction because the zero flag was <Flags?set:not set>.' +\n      ';SZS;fop:RDZ,cldpc,!message;fldpc;rdpca,aout,hltj',\n      '<Flags?Skipped over:Continued to> the next instruction because the negative flag was <Flags?not set:set>.' +\n      ';SNC;fop:RDNN,cldpc,!message;fldpc;rdpca,aout,hltj',\n      '<Flags?Skipped over:Continued to> the next instruction because the negative flag was <Flags?set:not set>.' +\n      ';SNS;fop:RDN,cldpc,!message;fldpc;rdpca,aout,hltj',\n\n      'Copied the value of Q into A.;MQA;asel,lda;fldpc',\n      'Copied the value of A into Q.;MQL;rda,ldq;fldpc',\n      'Swapped the values of A and Q.;SWP;rda,ldt;asel,lda;rdt,ldq;fldpc',\n    ],\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './html_components/Root';\nimport * as serviceWorker from './serviceWorker';\nimport { Datapath } from './logic/datapath';\nimport { PICO } from './architectures/pico';\n\nconst datapath = new Datapath();\ndatapath.loadDef(PICO);\nReactDOM.render(<Root datapath={datapath} />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}